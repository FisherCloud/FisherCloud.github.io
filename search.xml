<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis学习笔记（１）————数据结构与对象</title>
    <url>/2020/02/25/redis-lerning-1/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h2 id="简单动态字符串-SDS-simple-dynamic-string"><a href="#简单动态字符串-SDS-simple-dynamic-string" class="headerlink" title="简单动态字符串 SDS(simple dynamic string)"></a>简单动态字符串 SDS(simple dynamic string)</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Redis 没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，以下简称 C 字符串）， 而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型， 并将 SDS 用作 Redis 的默认字符串表示。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存字符串对象的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h3><p>空间预分配用于优化 SDS 的字符串增长操作： 当 SDS 的 API 对一个 SDS 进行修改， 并且需要对 SDS 进行空间扩展的时候， 程序不仅会为 SDS 分配修改所必须要的空间， 还会为 SDS 分配额外的未使用空间。</p><p>其中， 额外分配的未使用空间数量由以下公式决定：</p><ul><li><p>如果对 SDS 进行修改之后， SDS 的长度（也即是 len 属性的值）将小于 1 MB ， 那么程序分配和 len 属性同样大小的未使用空间， 这时 SDS len 属性的值将和 free 属性的值相同。 举个例子， 如果进行修改之后， SDS 的 len 将变成 13 字节， 那么程序也会分配 13 字节的未使用空间， SDS 的 buf 数组的实际长度将变成 13 + 13 + 1 = 27 字节（额外的一字节用于保存空字符）。</p></li><li><p>如果对 SDS 进行修改之后， SDS 的长度将大于等于 1 MB ， 那么程序会分配 1 MB 的未使用空间。 举个例子， 如果进行修改之后， SDS 的 len 将变成 30 MB ， 那么程序会分配 1 MB 的未使用空间， SDS 的 buf 数组的实际长度将为 30 MB + 1 MB + 1 byte 。</p></li></ul><p>通过空间预分配策略， Redis 可以减少连续执行字符串增长操作所需的内存重分配次数。</p><h3 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h3><p>惰性空间释放用于优化 SDS 的字符串缩短操作： 当 SDS 的 API 需要缩短 SDS 保存的字符串时， 程序并不立即使用内存重分配来回收缩短后多出来的字节， 而是使用 free 属性将这些字节的数量记录起来， 并等待将来使用。</p><h3 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h3><p>SDS 的 API 都是二进制安全的（binary-safe）： 所有 SDS API 都会以处理二进制的方式来处理 SDS 存放在 buf 数组里的数据， 程序不会对其中的数据做任何限制、过滤、或者假设 —— 数据在写入时是什么样的， 它被读取时就是什么样。（为了确保 Redis 可以适用于各种不同的使用场景）通过使用二进制安全的 SDS ， 而不是 C 字符串， 使得 Redis 不仅可以保存文本数据， 还可以保存任意格式的二进制数据。</p><h3 id="SDS-API"><a href="#SDS-API" class="headerlink" title="SDS API"></a>SDS API</h3><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">作用</th><th style="text-align:left">时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left">sdsnew</td><td style="text-align:left">创建一个包含给定 C 字符串的 SDS 。</td><td style="text-align:left">O(N) ， N 为给定 C 字符串的长度。</td></tr><tr><td style="text-align:left">sdsempty</td><td style="text-align:left">创建一个不包含任何内容的空 SDS 。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">sdsfree</td><td style="text-align:left">释放给定的 SDS 。</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">sdslen</td><td style="text-align:left">返回 SDS 的已使用空间字节数。</td><td style="text-align:left">这个值可以通过读取 SDS 的 len 属性来直接获得， 复杂度为 O(1) 。</td></tr><tr><td style="text-align:left">sdsavail</td><td style="text-align:left">返回 SDS 的未使用空间字节数。</td><td style="text-align:left">这个值可以通过读取 SDS 的 free 属性来直接获得， 复杂度为 O(1) 。</td></tr><tr><td style="text-align:left">sdsdup</td><td style="text-align:left">创建一个给定 SDS 的副本（copy）。</td><td style="text-align:left">O(N) ， N 为给定 SDS 的长度。</td></tr><tr><td style="text-align:left">sdsclear</td><td style="text-align:left">清空 SDS 保存的字符串内容。</td><td style="text-align:left">因为惰性空间释放策略，复杂度为 O(1) 。</td></tr><tr><td style="text-align:left">sdscat</td><td style="text-align:left">将给定 C 字符串拼接到 SDS 字符串的末尾。</td><td style="text-align:left">O(N) ， N 为被拼接 C 字符串的长度。</td></tr><tr><td style="text-align:left">sdscatsds</td><td style="text-align:left">将给定 SDS 字符串拼接到另一个 SDS 字符串的末尾。</td><td style="text-align:left">O(N) ， N 为被拼接 SDS 字符串的长度。</td></tr><tr><td style="text-align:left">sdscpy</td><td style="text-align:left">将给定的 C 字符串复制到 SDS 里面， 覆盖 SDS 原有的字符串。</td><td style="text-align:left">O(N) ， N 为被复制 C 字符串的长度。</td></tr><tr><td style="text-align:left">sdsgrowzero</td><td style="text-align:left">用空字符将 SDS 扩展至给定长度。</td><td style="text-align:left">O(N) ， N 为扩展新增的字节数。</td></tr><tr><td style="text-align:left">sdsrange</td><td style="text-align:left">保留 SDS 给定区间内的数据， 不在区间内的数据会被覆盖或清除。</td><td style="text-align:left">O(N) ， N 为被保留数据的字节数。</td></tr><tr><td style="text-align:left">sdstrim</td><td style="text-align:left">接受一个 SDS 和一个 C 字符串作为参数， 从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符。</td><td style="text-align:left">O(M*N) ， M 为 SDS 的长度， N 为给定 C 字符串的长度。</td></tr><tr><td style="text-align:left">sdscmp</td><td style="text-align:left">对比两个 SDS 字符串是否相同。</td><td style="text-align:left">O(N) ， N 为两个 SDS 中较短的那个 SDS 的长度。</td></tr></tbody></table><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>Redis 只会使用 C 字符串作为字面量， 在大多数情况下， Redis 使用 SDS （Simple Dynamic String，简单动态字符串）作为字符串表示。</p><p>比起 C 字符串， SDS 具有以下优点：</p><ul><li>常数复杂度获取字符串长度。</li><li>杜绝缓冲区溢出。</li><li>减少修改字符串长度时所需的内存重分配次数。</li><li>二进制安全。</li><li>兼容部分 C 字符串函数。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Redis 设计与实现》<br><a href="http://redisbook.com/index.html" target="_blank" rel="noopener">http://redisbook.com/index.html</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统笔记（1）——操作系统引论</title>
    <url>/2019/09/03/operating-system-capter-one/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;操作系统（Operating System，OS）是配置在计算机硬件上的第一层软件，其主要作用是管理好这些设备，提高它们的利用率和系统的吞吐量，并为用户和应用程序提供一个简单的接口，便于用户使用软硬件资源。</p><h2 id="操作系统的目标和作用"><a href="#操作系统的目标和作用" class="headerlink" title="操作系统的目标和作用"></a>操作系统的目标和作用</h2><h3 id="操作系统的目标"><a href="#操作系统的目标" class="headerlink" title="操作系统的目标"></a>操作系统的目标</h3><h4 id="方便性"><a href="#方便性" class="headerlink" title="方便性"></a>方便性</h4><h4 id="有效性"><a href="#有效性" class="headerlink" title="有效性"></a>有效性</h4><ul><li>提高系统资源的利用率</li><li>提高系统的吞吐量</li></ul><h4 id="可扩充性"><a href="#可扩充性" class="headerlink" title="可扩充性"></a>可扩充性</h4><h4 id="开放性"><a href="#开放性" class="headerlink" title="开放性"></a>开放性</h4><ul><li>系统能够遵循世界标准规范</li></ul><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><h4 id="OS作为用户与计算机硬件系统之间的接口"><a href="#OS作为用户与计算机硬件系统之间的接口" class="headerlink" title="OS作为用户与计算机硬件系统之间的接口"></a>OS作为用户与计算机硬件系统之间的接口</h4><p>&emsp;&emsp;OS 作为用户与计算机硬件系统之间接口的含义是：OS 处于用户与计算机硬件系统之<br>间，用户通过 OS 来使用计算机系统。</p><p>&emsp;&emsp;用户可通过以下三种方式使用计算机</p><ul><li>命令方式</li><li>系统调用方式</li><li>图形、窗口方式</li></ul><p><img src="/2019/09/03/operating-system-capter-one/./operating-system-capter-one/1-1.png" alt="图 1-1 OS 作为接口的示意图"></p><h4 id="OS作为计算机系统资源的管理者"><a href="#OS作为计算机系统资源的管理者" class="headerlink" title="OS作为计算机系统资源的管理者"></a>OS作为计算机系统资源的管理者</h4><p>&emsp;&emsp;资源归纳起来分为四类：处理器、存储器、I/O 设备以及信息(数据和程序)</p><ul><li>处理器管理：用于分配和控制处理机</li><li>存储器管理：负责内存的分配和回收</li><li>I/O设备管理：负责I/O设备的分配与操纵；文件管理，负责文件的存取、共享和保护</li></ul><h4 id="OS实现了对计算机资源的抽象"><a href="#OS实现了对计算机资源的抽象" class="headerlink" title="OS实现了对计算机资源的抽象"></a>OS实现了对计算机资源的抽象</h4><p><img src="/2019/09/03/operating-system-capter-one/./operating-system-capter-one/1-2.png" alt="图 1-2 I/O 软件隐藏了 I/O 操作实现的细节"></p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><h3 id="无操作系统的计算机系统"><a href="#无操作系统的计算机系统" class="headerlink" title="无操作系统的计算机系统"></a>无操作系统的计算机系统</h3><h4 id="人工操作方式"><a href="#人工操作方式" class="headerlink" title="人工操作方式"></a>人工操作方式</h4><p>缺点：</p><ul><li>用户独占</li><li>CPU等待人工操作</li></ul><h4 id="脱机输入-输出方式"><a href="#脱机输入-输出方式" class="headerlink" title="脱机输入/输出方式"></a>脱机输入/输出方式</h4><p><img src="/2019/09/03/operating-system-capter-one/./operating-system-capter-one/1-3.png" alt="图 1-3 脱机 I/O 示意图"></p><p>优点：</p><ul><li>减少了CPU的空闲时间</li><li>提高了I/O速度</li></ul><h3 id="单道批处理系统"><a href="#单道批处理系统" class="headerlink" title="单道批处理系统"></a>单道批处理系统</h3><p>&emsp;&emsp;<strong>单道批处理系统(Simple Batch Processing System)</strong></p><h4 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h4><p><img src="/2019/09/03/operating-system-capter-one/./operating-system-capter-one/1-4.png" alt="图 1-4 单道批处理系统的处理流程"></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>自动性</li><li>顺序性</li><li>单道性</li></ul><h3 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>&emsp;&emsp;<strong>多道批处理系统(Multiprogrammed Batch Processing System)</strong>，用户所提交的作业都先存放在外存上并排成一个队列，称为“后备队列”；然后，由作业调度程序按一定的算法从后备队列中选择若干个作业调入内存，使它们共享 CPU 和系统中的各种资源。</p><p>好处：</p><ul><li>提高CPU的利用率<br><img src="/2019/09/03/operating-system-capter-one/./operating-system-capter-one/1-5.png" alt="图 1-5 单道和多道程序运行情况"></li><li>提高内存和I/O设备利用率</li><li>增加系统吞吐量</li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>资源利用率高</li><li>系统吞吐量大</li><li>平均周转时间长</li><li>无交互能力</li></ul><h4 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h4><ul><li>处理机管理问题</li><li>内存管理问题</li><li>I/O设备管理问题</li><li>文件管理问题</li><li>作业管理问题</li></ul><h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><p>&emsp;&emsp;<strong>分时系统(Time Sharing System)</strong></p><h4 id="分时系统的产生"><a href="#分时系统的产生" class="headerlink" title="分时系统的产生"></a>分时系统的产生</h4><ul><li>人机交互</li><li>共享主机</li><li>便于用户上机</li></ul><p>第一台真正的分时操作系统(CTSS，Compatable Time Sharing System)是由麻省理工学院开发成功的。</p><h4 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h4><ul><li>及时回收</li><li>及时处理</li></ul><h4 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h4><ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li></ul><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><p>&emsp;&emsp;<strong>实时系统(Real Time System)</strong></p><h4 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h4><ul><li>实时控制</li><li>实时信息处理</li></ul><h4 id="实时任务"><a href="#实时任务" class="headerlink" title="实时任务"></a>实时任务</h4><ul><li>按任务执行时是否呈现周期性来划分<ul><li>周期性任务</li><li>非周期性任务</li></ul></li><li>根据截止时间的要求来划分<ul><li>硬实时任务</li><li>软实时任务</li></ul></li></ul><h2 id="操作系统基本特征"><a href="#操作系统基本特征" class="headerlink" title="操作系统基本特征"></a>操作系统基本特征</h2><h3 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h3><h4 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h4><p>&emsp;&emsp;<strong>并行性和并发性(Concurrence)</strong>。并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><h4 id="引入进程"><a href="#引入进程" class="headerlink" title="引入进程"></a>引入进程</h4><p>进程是操作系统中可以拥有资源并作为独立运行的基本单位。</p><h4 id="引入线程"><a href="#引入线程" class="headerlink" title="引入线程"></a>引入线程</h4><p>线程作为独立运行和独立调度的基本单位。</p><h3 id="共享性"><a href="#共享性" class="headerlink" title="共享性"></a>共享性</h3><h4 id="互斥共享方式"><a href="#互斥共享方式" class="headerlink" title="互斥共享方式"></a>互斥共享方式</h4><h4 id="同时访问方式"><a href="#同时访问方式" class="headerlink" title="同时访问方式"></a>同时访问方式</h4><h3 id="虚拟技术"><a href="#虚拟技术" class="headerlink" title="虚拟技术"></a>虚拟技术</h3><h4 id="时分复用技术"><a href="#时分复用技术" class="headerlink" title="时分复用技术"></a>时分复用技术</h4><ul><li>虚拟处理机技术</li><li>虚拟设备技术</li></ul><h4 id="空分复用技术"><a href="#空分复用技术" class="headerlink" title="空分复用技术"></a>空分复用技术</h4><ul><li>虚拟磁盘技术</li><li>虚拟存储器技术</li></ul><h3 id="异步性"><a href="#异步性" class="headerlink" title="异步性"></a>异步性</h3><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><h3 id="处理机管理功能"><a href="#处理机管理功能" class="headerlink" title="处理机管理功能"></a>处理机管理功能</h3><h4 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h4><h4 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h4><ul><li>进程互斥方式</li><li>进程同步方式</li></ul><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><h4 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h4><ul><li>作业调度</li><li>进程调度</li></ul><h3 id="存储器管理功能"><a href="#存储器管理功能" class="headerlink" title="存储器管理功能"></a>存储器管理功能</h3><h4 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h4><p>&emsp;&emsp;为了实现内存分配，在内存分配的机制中应具有这样的结构和功能：</p><ul><li>内存分配数据结构</li><li>内存分配功能</li><li>内存回收功能</li></ul><h4 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h4><h4 id="地址映射"><a href="#地址映射" class="headerlink" title="地址映射"></a>地址映射</h4><h4 id="内存扩充"><a href="#内存扩充" class="headerlink" title="内存扩充"></a>内存扩充</h4><ul><li>请求调入功能</li><li>置换功能</li></ul><h3 id="设备管理功能"><a href="#设备管理功能" class="headerlink" title="设备管理功能"></a>设备管理功能</h3><p>&emsp;&emsp;设备管理应具有缓冲管理、设备分配和设备处理以及虚拟设备等功能。</p><h4 id="缓冲管理"><a href="#缓冲管理" class="headerlink" title="缓冲管理"></a>缓冲管理</h4><p>&emsp;&emsp;最常见的几种缓冲区机制：单缓冲机制，能实现双向传送数据的双缓冲机制，提供多个设备同时使用的公共缓冲池机制。</p><h4 id="设备分配"><a href="#设备分配" class="headerlink" title="设备分配"></a>设备分配</h4><p>&emsp;&emsp;根据用户进程的I/O请求、系统的现有资源情况以及按照某种设备的分配策略，为之分配其所需的设备。</p><h4 id="设备处理"><a href="#设备处理" class="headerlink" title="设备处理"></a>设备处理</h4><p>&emsp;&emsp;设备处理程序又称设备驱动程序。基本任务是实现CPU和设备控制器之间的通信。</p><h3 id="文件管理功能"><a href="#文件管理功能" class="headerlink" title="文件管理功能"></a>文件管理功能</h3><h4 id="文件存储空间的管理"><a href="#文件存储空间的管理" class="headerlink" title="文件存储空间的管理"></a>文件存储空间的管理</h4><p>&emsp;&emsp;系统设置相应的数据结构，用于记录文件存储空间的使用情况，以供分配存储空间时参考；系统还具有对存储空间进行分配和回收的功能。</p><h4 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h4><h4 id="文件的读-写管理和保护"><a href="#文件的读-写管理和保护" class="headerlink" title="文件的读/写管理和保护"></a>文件的读/写管理和保护</h4><ul><li>文件的读/写管理</li><li>文件保护<ul><li>防止未经核准的用户存取文件</li><li>防止冒名顶替存取文件</li><li>防止以不正确的方式使用文件</li></ul></li></ul><h3 id="操作系统与用户之间的接口"><a href="#操作系统与用户之间的接口" class="headerlink" title="操作系统与用户之间的接口"></a>操作系统与用户之间的接口</h3><ul><li>用户接口<br>它是提供给用户使用的接口，用户可通过该接口取得操作系统的服务</li><li>程序接口<br>它是提供给程序员在编程时使用的接口，是用户程序取得操作系统服务的唯一途径</li></ul><h4 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h4><ul><li>联机用户接口</li><li>脱机用户接口</li><li>图形用户接口</li></ul><h4 id="程序接口"><a href="#程序接口" class="headerlink" title="程序接口"></a>程序接口</h4><h2 id="OS结构设计"><a href="#OS结构设计" class="headerlink" title="OS结构设计"></a>OS结构设计</h2><h3 id="传统操作系统结构"><a href="#传统操作系统结构" class="headerlink" title="传统操作系统结构"></a>传统操作系统结构</h3><h4 id="无结构操作系统"><a href="#无结构操作系统" class="headerlink" title="无结构操作系统"></a>无结构操作系统</h4><h4 id="模块化结构OS"><a href="#模块化结构OS" class="headerlink" title="模块化结构OS"></a>模块化结构OS</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p><img src="/2019/09/03/operating-system-capter-one/1-6.png" alt="图 1-6 模块化结构的操作系统"></p><h5 id="模块独立性"><a href="#模块独立性" class="headerlink" title="模块独立性"></a>模块独立性</h5><ul><li>内聚性，指模块内部各部分间联系的紧密程度。内聚性越高，模块的独立性越强。</li><li>耦合度，指模块间相互联系和相互影响的程度。显然，耦合度越低，模块的独立性越好。</li></ul><h5 id="模块接口法的优缺点"><a href="#模块接口法的优缺点" class="headerlink" title="模块接口法的优缺点"></a>模块接口法的优缺点</h5><p>&emsp;&emsp;利用模块―接口法开发的 OS，较之无结构 OS 具有以下明显的优点：</p><ul><li>提高 OS 设计的正确性、可理解性和可维护性；</li><li>增强 OS 的适应性；</li><li>加速 OS 的开发过程。</li></ul><p>&emsp;&emsp;模块化结构设计仍存在下述问题：</p><ul><li>在 OS 设计时，对各模块间的接口规定很难满足在模块完成后对接口的实际需求。</li><li>在 OS 设计阶段，设计者必须做出一系列的决定(决策)，每一个决定必须建立在上一个决定的基础上。但在模块化结构设计中，各模块的设计齐头并进，无法寻找到一个可靠的决定顺序，造成各种决定的“无序性”，这将使程序设计人员很难做到“设计中的每一步决定都是建立在可靠的基础上”，因此模块―接口法又被称为“无序模块法”。</li></ul><h4 id="分层式结构OS"><a href="#分层式结构OS" class="headerlink" title="分层式结构OS"></a>分层式结构OS</h4><p>&emsp;&emsp;将一个操作系统分为若干个层次，每层又由若干个模块组成，各层之间只存在着单向的依赖关系，即高层仅依赖于紧邻它的低层。</p><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><p>优点：</p><ul><li>易保证系统的正确性</li><li>易扩充和易维护</li></ul><p>缺点：</p><ul><li>系统效率降低了</li></ul><h3 id="客户-服务器模式"><a href="#客户-服务器模式" class="headerlink" title="客户/服务器模式"></a>客户/服务器模式</h3><p>&emsp;&emsp;<strong>客户/服务器(Client/Server)</strong>模式可简称为 C/S 模式。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>操作系统笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-zsh</title>
    <url>/2019/07/19/oh-my-zsh/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="zsh-简介"><a href="#zsh-简介" class="headerlink" title="zsh 简介"></a>zsh 简介</h3><p>zsh 是一个专为交互式使用而设计的 shell，尽管它也是一种强大的脚本语言。 bash，ksh 和 tcsh 的许多有用功能都被合并到 zsh 中; 添加了许多原始功能。</p><p><img src="https://upload-images.jianshu.io/upload_images/9341918-d9636a0bd1f20084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/529" alt="zsh"></p><h3 id="zsh-安装"><a href="#zsh-安装" class="headerlink" title="zsh 安装"></a>zsh 安装</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="noopener">原文链接</a></p><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>使用 Homebrew 安装</p><p><code>brew install zsh zsh-completions</code></p><p>要将 zsh 设置为默认 shell，请对 macOS High Sierra 执行以下操作</p><p><code>chsh -s /bin/zsh</code></p><p>macOS 的大多数版本默认提供 zsh，也可使用 MacPorts 安装</p><p><code>sudo port install zsh zsh-completions</code></p><h4 id="Ubuntu-Debian-amp-derivatives-Windows-10-WSL-Native-Linux-kernel-with-Windows-10-build-1903"><a href="#Ubuntu-Debian-amp-derivatives-Windows-10-WSL-Native-Linux-kernel-with-Windows-10-build-1903" class="headerlink" title="Ubuntu, Debian &amp; derivatives (Windows 10 WSL | Native Linux kernel with Windows 10 build 1903)"></a>Ubuntu, Debian &amp; derivatives (Windows 10 WSL | Native Linux kernel with Windows 10 build 1903)</h4><p><code>apt install zsh</code></p><h4 id="OpenSUSE"><a href="#OpenSUSE" class="headerlink" title="OpenSUSE"></a>OpenSUSE</h4><p><code>zypper install zsh</code></p><h4 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h4><p><code>pacman -S zsh</code></p><h4 id="Void-Linux"><a href="#Void-Linux" class="headerlink" title="Void Linux"></a>Void Linux</h4><p><code>xbps-install zsh</code></p><h4 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h4><p><code>dnf install zsh</code></p><h4 id="OpenBSD"><a href="#OpenBSD" class="headerlink" title="OpenBSD"></a>OpenBSD</h4><p>To install the package:</p><p><code>pkg_add zsh</code></p><h4 id="FreeBSD"><a href="#FreeBSD" class="headerlink" title="FreeBSD"></a>FreeBSD</h4><p>To install the package:</p><p><code>pkg install zsh</code></p><p>To install the port:</p><p><code>cd /usr/ports/shells/zsh/ &amp;&amp; make install clean</code></p><p>To reduce memory usage, optionally enable zsh-mem options with</p><p><img src="https://camo.githubusercontent.com/9ea9d241c03111b902b66f4dc2201f0f8cf66492/68747470733a2f2f692e696d6775722e636f6d2f6c34696436456b2e706e67" alt="zsh"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make config</span><br></pre></td></tr></table></figure><p>before running “make install”.</p><h4 id="Centos-RHEL"><a href="#Centos-RHEL" class="headerlink" title="Centos/RHEL"></a>Centos/RHEL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update &amp;&amp; sudo yum -y install zsh</span><br></pre></td></tr></table></figure><h4 id="Solus"><a href="#Solus" class="headerlink" title="Solus"></a>Solus</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eopkg it zsh</span><br></pre></td></tr></table></figure><h4 id="Funtoo-Gentoo"><a href="#Funtoo-Gentoo" class="headerlink" title="Funtoo/Gentoo"></a>Funtoo/Gentoo</h4><p><code>emerge app-shells/zsh</code></p><h4 id="Alpine-Linux"><a href="#Alpine-Linux" class="headerlink" title="Alpine Linux"></a>Alpine Linux</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add zsh</span><br></pre></td></tr></table></figure><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p><img src="https://upload-images.jianshu.io/upload_images/9341918-369ad79b43a58d38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/551" alt="zsh"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>oh-my-zsh 通过在终端中运行以下命令之一来安装的。 您可以通过命令行使用 curl 或 wget 安装它。</p><h4 id="通过-curl"><a href="#通过-curl" class="headerlink" title="通过 curl"></a>通过 curl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h4 id="通过-wget"><a href="#通过-wget" class="headerlink" title="通过 wget"></a>通过 wget</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>详细使用、主题等见<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>的文档说明</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>zsh</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>learn for vi/vim</title>
    <url>/2019/07/19/vim/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h2 id="what-is-vi-vim"><a href="#what-is-vi-vim" class="headerlink" title="what is vi/vim"></a>what is vi/vim</h2><p>A text editor. very strong.</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:i <span class="comment"># 当前光标的位置插入</span></span><br><span class="line">:I <span class="comment"># 当前光标所在行首插入</span></span><br><span class="line">:a <span class="comment"># 当前字符之后插入</span></span><br><span class="line">:A <span class="comment"># 当前光标所在行末插入</span></span><br></pre></td></tr></table></figure><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:esc <span class="comment"># 退出当前模式</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:x <span class="comment"># 当前光标位置向后删除</span></span><br><span class="line">:X <span class="comment"># 当前光标位置向前删除</span></span><br></pre></td></tr></table></figure><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:u <span class="comment"># 撤销一步操作（相当于图形编辑器的ctrl+z）</span></span><br></pre></td></tr></table></figure><h3 id="行的操作"><a href="#行的操作" class="headerlink" title="行的操作"></a>行的操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:home或^ <span class="comment"># 移动光标到行首</span></span><br><span class="line">:end或$ <span class="comment"># 移动光标到行末</span></span><br><span class="line">:dd <span class="comment"># 删除一行</span></span><br><span class="line">:Ndd <span class="comment"># 删除N行</span></span><br><span class="line">:yy <span class="comment"># 复制一行</span></span><br><span class="line">:Nyy <span class="comment"># 复制N行</span></span><br><span class="line">:p <span class="comment"># 粘贴内容</span></span><br></pre></td></tr></table></figure><h3 id="词操作"><a href="#词操作" class="headerlink" title="词操作"></a>词操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:dw <span class="comment"># 向后删除一个单词（从当前光标开始）</span></span><br><span class="line">:yw <span class="comment"># 向后复制一个单词</span></span><br><span class="line">:D或d+$ <span class="comment"># 删除到行末</span></span><br><span class="line">:d+^ <span class="comment"># 删除到行末</span></span><br><span class="line">:y+$ <span class="comment"># 复制到行末</span></span><br><span class="line">:y+^ <span class="comment"># 复制到行首</span></span><br></pre></td></tr></table></figure><h3 id="v模式"><a href="#v模式" class="headerlink" title="v模式"></a>v模式</h3><p>进入v模式 移动光标进入列编辑模式</p><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>步骤</p><p>1、ctrl+v进入列编辑模式</p><p>2、向下或者向上移动光标</p><p>3、把需要注释的行的开头标记起来</p><p>4、然后按下I</p><p>5、再插入注释符，如“#”、“//”</p><p>6、再按下esc退出当前模式，此时就会全部注释选中的行</p><h4 id="取消多行注释"><a href="#取消多行注释" class="headerlink" title="取消多行注释"></a>取消多行注释</h4><p>步骤</p><p>1、ctrl+v进入列编辑模式</p><p>2、向上或者向下移动光标</p><p>3、选中需要取消注释的行</p><p>4、按下d就会删除注释符号</p><h2 id="vim命令行模式"><a href="#vim命令行模式" class="headerlink" title="vim命令行模式"></a>vim命令行模式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:w <span class="comment"># (write)写文件，相当于保存</span></span><br><span class="line"></span><br><span class="line">:q <span class="comment"># (quit)退出</span></span><br><span class="line"></span><br><span class="line">:! <span class="comment"># 强制</span></span><br><span class="line"></span><br><span class="line">:wq <span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line">:q! <span class="comment"># 不保存强制退出</span></span><br><span class="line"></span><br><span class="line">:wq! <span class="comment"># 保存强制退出</span></span><br></pre></td></tr></table></figure><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:ZZ <span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line">:r+<span class="string">'char'</span> <span class="comment"># 快速替换,'char'一个字符</span></span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%s/this/that <span class="comment"># 每一行的第一个this被替换成that</span></span><br><span class="line"></span><br><span class="line">:%s/this/that/g <span class="comment"># 文本中所有的this都替换成that</span></span><br><span class="line"></span><br><span class="line">:1,11s/this/that/g <span class="comment"># 从第1行到第11行的所有this都替换成that</span></span><br></pre></td></tr></table></figure><h2 id="行号"><a href="#行号" class="headerlink" title="行号"></a>行号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> nu <span class="comment">#打开行号</span></span><br><span class="line"></span><br><span class="line">:<span class="built_in">set</span> nonu <span class="comment">#关闭行号</span></span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:/root <span class="comment"># 搜索root，查找到的第一个root高亮，n 向下搜索，N 向上搜索</span></span><br><span class="line"></span><br><span class="line">:noh <span class="comment"># 去除高亮显示</span></span><br><span class="line"></span><br><span class="line">:!ls <span class="comment"># 调用系统命令ls</span></span><br></pre></td></tr></table></figure><h2 id="vim中定位到某一行"><a href="#vim中定位到某一行" class="headerlink" title="vim中定位到某一行"></a>vim中定位到某一行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:gg <span class="comment"># 定位到第一行行首</span></span><br><span class="line"></span><br><span class="line">:G <span class="comment"># 定位到最后一行行首</span></span><br></pre></td></tr></table></figure><h2 id="vim打开多个文件"><a href="#vim打开多个文件" class="headerlink" title="vim打开多个文件"></a>vim打开多个文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim -O fileone filetwo # 打开两个文件进行编辑</span></span><br><span class="line"></span><br><span class="line">:ctrl+ww <span class="comment"># 多个文件间切换</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vi</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Qt5.7.0编译移植到Linux-Arm-A9</title>
    <url>/2019/06/19/Qt5-7-Linux-Arm-A9/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><p>原文链接<br><a href="https://my.oschina.net/u/938455/blog/474516" target="_blank" rel="noopener">https://my.oschina.net/u/938455/blog/474516</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>ARM</tag>
      </tags>
  </entry>
  <entry>
    <title>基于单火取电的无线开关研究与设计</title>
    <url>/2019/05/01/SingleFireLineSwitch/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="基于单火取电的无线开关研究与设计"><a href="#基于单火取电的无线开关研究与设计" class="headerlink" title="基于单火取电的无线开关研究与设计"></a>基于单火取电的无线开关研究与设计</h1><p>四川师范大学2018年大学生创新训练项目</p><h2 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h2><ul><li>2016110202 曹俊</li><li>2016110252 余鑫</li></ul><hr><h1 id="结题报告"><a href="#结题报告" class="headerlink" title="结题报告"></a>结题报告</h1><h2 id="【摘要】"><a href="#【摘要】" class="headerlink" title="【摘要】"></a>【摘要】</h2><p>传统的机械师墙壁开关盒利用弹簧和机械结构控制火线的通断，即使用单根火线布线的开关，我们研究设计的单火线取电的无线开关用Altium Designer专业PCB设计软件进行的PCB板设计，能够直接安装于传统的86开关盒中，不需要另外布线完全兼容单火线电路，能够从单火线取电给MCU和无线模块供电，且能够远程控制单火线开关且能够在改变开关状态后反馈当前的开关状态，实现了开关的智能化设计。</p><h2 id="【关键词】"><a href="#【关键词】" class="headerlink" title="【关键词】"></a>【关键词】</h2><p>单火线取电；Altium Designer；PCB；无线开关；</p><h2 id="一、项目概述"><a href="#一、项目概述" class="headerlink" title="一、项目概述"></a>一、项目概述</h2><p>智能家居是以人们的住宅为基础，以节能环保为理念，通过采用相关技术对家居生活设施进行集成处理，完善住宅设施管理系统，提高管理效率，使人们的家居生活更舒适、安全、便利，且更具艺术性。而且，智能家居将社会发展、先进技术与个人需求相结合，不仅有利于改善人们的居住环境，还有利于优化社会自然经济。智能家居的实现需要家居网络系统、家庭资源管理系统、智能照明系统、音乐系统、安全防护系统等的相互协作，以进一步实现智能家居的智能化、现代化[1]。</p><p>智能开关是智能家居中非常重要的一个节点，使用量最大。智能开关是传统机械式按键式开关的换代产品，可实现智能控制，其操作方便是传统开关不能比拟的，目前大部分的电子开关采用零火线供电，需要接入火线和零线，而传统的机械式开关只有一根火线控制，如果需要更换此类开关必然需要重新布线，这给安装带来了极大的不便，因此无法大规模推广使用。所以，单火线开关的研究显得格外重要[2]。而单火线取电的无线开关能够适应传统开关盒结构且加入了无线控制功能，简化了安装工序，降低了改造成本。单火取电的无线开关在未来的智能家居发展中是必然趋势。</p><h2 id="二、项目实施的主要内容"><a href="#二、项目实施的主要内容" class="headerlink" title="二、项目实施的主要内容"></a>二、项目实施的主要内容</h2><h3 id="1-功能分析"><a href="#1-功能分析" class="headerlink" title="1. 功能分析"></a>1. 功能分析</h3><ul><li>1.1 硬件设计分析<ul><li>1.1.1 单火线取电电路分析<ul><li>1.1.1.1 闭态取电<br>闭态取电电路中使用整流桥能够分别取得上半个周期和下班周期的交流电，即输出脉冲直流电。D3和D4能够防止电流过大造成可控硅Q1的损坏，且电压过大时能够导通Q1，减少流过整流桥的电流和两端电压。电路中的磁珠能够抑制电路中的高频噪声和尖峰干扰，还能够静电脉冲，电容C7能够吸收高频交流成分，使取得的电流、电压保持在一定的范围内。<br><img src="/2019/05/01/SingleFireLineSwitch/闭态取电电路.png" alt="图1-1 闭态取电电路"></li><li>1.1.1.2 开态取电<br>开态取电电路中L1和L2为单火线的出口，开关打开状态L1和L2能够取到较模拟地高的电势，再通过二极管D1和D6阻止交流电的负半个周期流经二极管，交流电的正半周期流经二极管后经过功率电感L1，L1能够阻止高频电流，电解电容C14能够吸收电流中的低频成分，最后得到的电流为基本稳定的脉冲直流，然后经过BSW-6V-03S单火线模块进行进一步的整流和放大，能够得到相对稳定的直流电压。<br><img src="/2019/05/01/SingleFireLineSwitch/开态取电电路.png" alt="图1-2 开态取电电路"></li><li>1.1.1.3 稳压电路<br>稳压电路中，VR1为线性稳压IC，能够提供3.3V电压的典型值输出，外围的C12电解电容能够吸收电流中的毛刺，实现滤波整流，C10和C11能够吸收电路中的高频交流成分，能够降低高频干扰。<br><img src="/2019/05/01/SingleFireLineSwitch/稳压电路.png" alt="图1-2 稳压电路"></li></ul></li><li>1.1.2 STM32电路及外围电路分析<ul><li>1.1.2.1 MCU最小系统电路<ul><li>1.1.2.1.1 MCU<br>主控芯片，是整个系统的心脏，能够执行复杂的运算和处理。<br><img src="/2019/05/01/SingleFireLineSwitch/MCU电路.png" alt="图1-2 MCU电路"></li><li>1.1.2.1.2 晶振电路<br>晶振（Y1），全称晶体振荡器，是一种能把电能和机械能相互转化的晶体在共振的状态下工作，以提供稳定，精确的单频振荡。晶振Y1结合STM32内部的电路，产生STM32所必须的时钟频率，STM32的一切指令的执行都是建立在这个基础上的，晶振的提供的时钟频率越稳定，那STM32的运行也就越稳定。晶振Y1两端并联电容，能够抑制震荡电路中产生的谐波，保持STM32运行的稳定。<br><img src="/2019/05/01/SingleFireLineSwitch/晶振电路.png" alt="图1-2 晶振电路"></li><li>1.1.2.1.3 BOOT电路<br>开发BOOT模式选择<br>1、通常使用程序代码存储在主闪存存储器，配置方式：BOOT0=0，BOOT1=X;<br>2、Flash锁死解决办法：<br>开发调试过程中，由于某种原因导致内部Flash锁死，无法连接SWD以及Jtag调试，无法读到设备，可以通过修改BOOT模式重新刷写代码。<br>修改为BOOT0=1，BOOT1=0即可从系统存储器启动，ST出厂时自带Bootloader程序，SWD以及JTAG调试接口都是专用的。重新烧写程序后，可将BOOT模式重新更换到BOOT0=0，BOOT1=X即可正常使用。<br><img src="/2019/05/01/SingleFireLineSwitch/BOOT电路.png" alt="图1-2 BOOT电路"></li></ul></li><li>1.1.2.2 USART1电路和下载电路<br>USART1为STM32的一个串口通讯口，能够通过此串口对程序进行调试以及Flash锁死后的解锁。<br>下载电路为STM32的SWD模式口，只需要两个引脚就能进行程序的下载和调试，且速度比串口下载程序速度快数十倍，且支持在线调试。<br><img src="/2019/05/01/SingleFireLineSwitch/USART1电路和下载电路.png" alt="图1-2 USART1电路和下载电路"></li><li>1.1.2.3 LC12S无线收发电路<br>STM32的USART2与LC12S 2.4G无线收发模块连接，实现STM32和无线模块的相互通信，STM32通过USART2发送数据到无线模块，无线模块将数据通过贴片天线发射到空中。LC12S也可接收空中的数据，同一网络的数据将会通过串口发送到STM32，实现双向通讯。<br><img src="/2019/05/01/SingleFireLineSwitch/LC12S无线收发电路.png" alt="图1-2 LC12S无线收发电路"></li><li>1.1.2.4 LC12S无线调试电路<br>通过无线调试口能够对LC12S无线收发模块调试（B0为BOOT电路）。<br><img src="/2019/05/01/SingleFireLineSwitch/LC12S无线调试电路.png" alt="图1-2 LC12S无线调试电路"></li><li>1.1.2.5 按键电路<br>按键电路中有S1,S2,S2三个按键，通过按下按键能够使电流导通，使MCU与按键相连的引脚变成高电势，MCU通过监测引脚的电平变化即可判断按键是否按下，其中S1为复位按键，与MCU的复位引脚相连接，按下按键会使MCU复位充气泵。电路中的电容C2,C4,C6能够消除按键抖动，电阻能够限制电流的大小防止烧芯片。<br><img src="/2019/05/01/SingleFireLineSwitch/按键电路.png" alt="图1-2 按键电路"></li><li>1.1.2.6 可控硅开关控制电路<br>光耦（MOC3063）的触发电流为5ma，MCU控制连接光耦的GPIO输出高电平使光耦导通，控制端的电阻用于限流，光耦（MOC3063）导通后，交流分流从4号引脚流出，控制可控硅（BTA16-600B）导通，即实现开关的导通。<br><img src="/2019/05/01/SingleFireLineSwitch/可控硅开关控制电路.png" alt="图1-2 可控硅开关控制电路"></li></ul></li></ul></li><li><p>1.2 软件设计分析</p><ul><li><p>1.2.2 按键控制<br>按键动作的监控使用定时扫描法，并使用软件消抖的方法提高按键触发的稳定性，通过每次扫描到的键值来执行相应的程序。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 按键控制核心代码</span><br><span class="line">    switch(KEY_SCAN())</span><br><span class="line">    &#123;</span><br><span class="line">    case 1:</span><br><span class="line">        RELAYXToggle(1);</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case 2:</span><br><span class="line">        RELAYXToggle(2);</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        // none</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>1.2.3 无线控制<br>连接无线模块的串口中断函数监听串口是否接收到数据，如果监听到数据先接收到一部分数据count标志位累计收到的字符数，接收到超过8位字符后进入程序判断，等待接收剩余数据，然后进行命令解析，再根据解析出的命令执行相关程序。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 无线控制核心代码</span><br><span class="line">if(count &gt;= 8)</span><br><span class="line">&#123;</span><br><span class="line">    delay_ms(100); // 接收剩余字符</span><br><span class="line"></span><br><span class="line">    flag = CMD_Handle(buffer); // 命令解析</span><br><span class="line"></span><br><span class="line">    USART2_SendStr(buffer); // 通过LC12S返回命令</span><br><span class="line">    delay_ms(50);</span><br><span class="line"></span><br><span class="line">    switch(flag)</span><br><span class="line">    &#123;</span><br><span class="line">    case 1:</span><br><span class="line">        RELAY_RESET(1);</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case 2:</span><br><span class="line">        RELAY_SET(1);</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case 3:</span><br><span class="line">        RELAY_RESET(2);</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case 4:</span><br><span class="line">        RELAY_SET(2);</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case 5:</span><br><span class="line">        printLedStatus();</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        // none</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memset(buffer, &apos;\0&apos;, sizeof(buffer));</span><br><span class="line">    count = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1.2.4 开关状态反馈<br>开关状态反馈通过读取GPIO的电平高低，然后通过无线模块发射出去。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* @file   printLedStatus</span><br><span class="line">* @brief  反馈开关状态.</span><br><span class="line">* @param  None</span><br><span class="line">* @retval None</span><br><span class="line">*/</span><br><span class="line">void printLedStatus(void)</span><br><span class="line">&#123;</span><br><span class="line">    sprintf(str, &quot;SWITCH0:%d\tSWITCH1:%d\r\n&quot;, GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_8), GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_9));</span><br><span class="line">    USART1_SendStr(str);</span><br><span class="line">    USART2_SendStr(str);</span><br><span class="line">    memset(str, &apos;\0&apos;, sizeof(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="三、项目成果特色及创新点"><a href="#三、项目成果特色及创新点" class="headerlink" title="三、项目成果特色及创新点"></a>三、项目成果特色及创新点</h2><p>我们团队研究和设计的基于单火取电的无线开关，能够完全兼容传统的单火线开关电路，只有单根火线进/出，不需要零线，可直接替换原有的墙壁开关，便于安装，更换时更无需重新布线，不用改变原来的线路布局，可以手动控制也可无线控制。采用了STM32嵌入式芯片，具有32bit微处理内核，能够进行复杂的计算和控制。大大方便了家庭的使用，也方便工程设计人员，使之不需更改原有电路设计即可达到现代化的需求，大大减轻了工作负担。</p><h2 id="四、项目取得成果展示及说明"><a href="#四、项目取得成果展示及说明" class="headerlink" title="四、项目取得成果展示及说明"></a>四、项目取得成果展示及说明</h2><p>图4-1 项目原理图</p><p>图4-2 电子元器件规划图</p><p>图 4-3 3D模型（内侧）</p><p>图 4-4 3D模型（外侧）</p><p>图 4-5 实物</p><h2 id="五、指导老师对项目的综合评价"><a href="#五、指导老师对项目的综合评价" class="headerlink" title="五、指导老师对项目的综合评价"></a>五、指导老师对项目的综合评价</h2><p>项目小组成员分工配合默契，项目完成总体良好，基本实现预期功能，项目实用性佳，符合申报书中所罗列的创新点。</p><h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><p>通过参加这次“大学生创新创业训练计划”和团队两人的努力，我们这次研究的项目达到了预期效果。在这期间，我们遇到了很多问题，有技术上的问题，也有态度上的问题。经过这次项目，我们积累了大量的经验，技术经验以及解决问的经验。</p><h2 id="【参考文献】"><a href="#【参考文献】" class="headerlink" title="【参考文献】"></a>【参考文献】</h2><p>[1]陈春云.物联网在智能家居中的应用与发展探析[J].信息记录材料,2019,20(02):73-74.</p><h2 id="2-杨德石-单火线智能开关的研究与设计-D-东南大学-2016"><a href="#2-杨德石-单火线智能开关的研究与设计-D-东南大学-2016" class="headerlink" title="[2]杨德石. 单火线智能开关的研究与设计[D].东南大学,2016."></a>[2]杨德石. 单火线智能开关的研究与设计[D].东南大学,2016.</h2><h1 id="验收报告"><a href="#验收报告" class="headerlink" title="验收报告"></a>验收报告</h1><h2 id="一、项目成果简介"><a href="#一、项目成果简介" class="headerlink" title="一、项目成果简介"></a>一、项目成果简介</h2><p>本项目是智能家居的一个小部分，利用单条火线供电的无线控制开关模块，使用LC12S无线串口透传模块，用于发送和接收控制信息，涉及电路分析设计，无线通信技术，可以通过无线通信来控制开关，也可反馈当前开关状态。</p><hr><h2 id="二、项目研究中使用的具体材料和方法"><a href="#二、项目研究中使用的具体材料和方法" class="headerlink" title="二、项目研究中使用的具体材料和方法"></a>二、项目研究中使用的具体材料和方法</h2><ol><li>实验器材：</li></ol><ul><li>STM32F103C8T6、STM32L151C8T6、LC12S 2.4G无线发射接收模块、BSW-6V-03S单火取电模块、可控硅（BT139）、光耦（MOC3063）、按键、电阻、电容、磁珠、二极管、整流桥、功率电感、保险丝、86开关盒、万用表、杜邦线、电烙铁等。</li></ul><ol start="2"><li>参考书籍：</li></ol><ul><li>[01] 程国钢. 51单片机常用模块查询手册[M]. 北京：清华大学出版社. 2016</li><li>[02] 何宏. 单片机原理与接口技术. 北京：国防工业出版社. 2006.07</li><li>[03] 杨西明，朱骐. 单片机编程与应用入门. 北京:机械工业出版社. 2004.06</li><li>[04] 卢有亮. 基于STM32的嵌入式系统原理与设计[M]. 北京：机械工业出版社.</li><li>[05] STM32F10xxx参考手册. 意法半导体（中国）投资有限公司. 2010</li><li>[06] 肖看,李群芳. 单片机原理、接口及应用——嵌入式系统技术基础[M]. 北京：清华大学出版社. 2010</li><li>[07] 程国钢主编. 51单片机常用模块查询手册[M]. 北京：清华大学出版社. 2016</li><li>[08] 何宏主编. 单片机原理与接口技术. 北京：国防工业出版社. 2006</li><li>[09] 杨西明，朱骐主编. 单片机编程与应用入门. 北京:机械工业出版社. 2004</li><li>[10] 先锋工作室编著. 单片机程序设计实例. 北京: 清华大学出版社. 2003</li></ul><ol start="3"><li>参考论文：</li></ol><ul><li>[01] 杨德石. 单火线智能开关的研究与设计[D].东南大学,2016.</li><li>[02] 余孟,郭毅.一种多位单火线取电智能控制开关的研究[J].日用电器,2017(S1):100-103+108.</li></ul><hr><h2 id="三、项目成果形式及数量"><a href="#三、项目成果形式及数量" class="headerlink" title="三、项目成果形式及数量"></a>三、项目成果形式及数量</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">1.文献资料综述（ ）份</td><td style="text-align:left">2.调查报告 （ ）份；</td><td style="text-align:left">3.研究论文 （ ）份 ；</td></tr><tr><td style="text-align:left">4.软件 （ ）份</td><td style="text-align:left">5.设计 （ ）份</td><td style="text-align:left">6.硬件研制 （ 1 ）份 ；</td></tr><tr><td style="text-align:left">7.获得专利 （ ）份</td><td style="text-align:left">8.心得体会 （ ）份；</td></tr><tr><td style="text-align:left">9.其他 （ 1 ）件，名称： <strong>单火线取电开关演示视频.mp4</strong></td></tr></tbody></table><hr><h2 id="四、项目经费使用情况："><a href="#四、项目经费使用情况：" class="headerlink" title="四、项目经费使用情况："></a>四、项目经费使用情况：</h2><table><thead><tr><th>支出科目</th><th>金　额</th><th>备注（注明经费支出时间）</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>硬件材料费|3000元|STM32F103C8T6/STM32L151C8T6、LC12S 2.4G无线收发模块、BSW-6V-03S单火线取电模块、可控硅、光耦、各类电容电阻、相关书籍及其他耗材（2018/4-2019/5）|<br>|合计|3000元|</p><hr><h2 id="五、项目研究总结"><a href="#五、项目研究总结" class="headerlink" title="五、项目研究总结"></a>五、项目研究总结</h2><h3 id="研究内容："><a href="#研究内容：" class="headerlink" title="研究内容："></a>研究内容：</h3><p>随着智能家居的快速发展，单火线智能墙壁开关(只有单根火线进/出，不需要零线)成为了传统机械墙壁开关的升级换代(直接替代)产品，实现了灯具和电器开关的智能化控制(如声控开关，触摸开关，红外线遥控开关，人体感应开关，手机控制WIFI 智能开关等)。并且，国内外普通家庭大多为单火线布线，在升级实现智能化改造时往往要求新智能开关能直接代换旧有的机械墙壁开关，更换时无需重新布线。所以开发新型电子智能照明开关都必须要求采用单线制(2 Wire 两线制)的单火开关。</p><p>根据工作原理可知，凡是电子智能照明开关本身都需要消耗一定的电流，在待机时，由于单火线开关待机取电是通过流过灯具的电流给智能开关的控制电路供电的，如果待机输入电流太小就会导致待机电路不能正常工作，如果待机输入电流太大就会导致灯具关闭后还会有闪烁或微亮(出现“关不死”的现象)等问题。特别是高阻抗的电子节能灯和 LED 灯(例如: 高效节能灯和 AC 直接驱动的 AC LED 灯具)，对待机电流更为敏感。</p><p>单火线开关的供电一般是分成两部份来实现对控制电路的供电：闭态供电和开态供电，闭态和开态取电电路为我们的主要研究内容。</p><p>单线制智能开关的 DC 供电电源(或者电源模块)设计需要重点考虑两个问题：一方面尽可能的降低待机功耗: 减小待机电流,避免出现灯关后闪烁或者微亮；另一方面是单火线的取电问题: 提供足够的输出电流给电子开关控制电路(如专用控制 IC，MCU，红外接收头,RF 遥控模块，继电器或者可控硅等)。由于电子开关工作时取电是通过开关断开时的两端压差来取电的，当开关闭合时就没有了电压差无法取电，这样就会导致控制电路开时失电失控问题。对于这一问题，有很多的解决办法出现，但有些还是比较复杂,电路成本也较高,比如现在市场上一些二线制电子开关的控制电路的供电电路（或电源模块）采用的方式有:</p><p>1、 方式一: 电子开关（触摸开关、声光控开关、人体感应开关等）中的开关元件的开态和断态情况下由同一电路供电，通过电容降压再用稳压管稳压的方式给控制电路提供直流电源，在断态时，由于控制电路消耗的电流也是电子开关主回路的电流，所以电子开关主回路的电流必须比较大，如果接上小功率的灯泡，灯丝就会发红，接上节能灯可能会出现关不断的现象，所以此类两线制<br>电子开关大多数不能控制小功率的负载，同时用电容降压，如果电流较大，电容的发热非常严重，这样就会给产品留下很大的故障隐患。</p><p>2、 方式二: 将开态和断态的时由不同的电路供电，其实现方式是先将主回路电流整流，再取出部分直流电作为控制电流。其缺点是对整流器件要求高、且发热严重，限制了负载功率的提高,不适用于较大功率灯具。上述两种电源模块，都解决了电子开关断态时供电电流较大的问题，但对于电子开关控制的负载的功率范围、稳定性及其电源转换效率方面，还是存在一定的不足。</p><h3 id="研究过程："><a href="#研究过程：" class="headerlink" title="研究过程："></a>研究过程：</h3><h4 id="项目前期"><a href="#项目前期" class="headerlink" title="项目前期"></a>项目前期</h4><p>我们完成了项目的部分准备，包括单火线取电电路的设计和仿真，学习STMF103芯片的时钟系统，GPIO，按键输入，定时器，端口复用和重映射，中断优先级管理，串口通讯，外部中断等的使用。学习了使用JLink、ST-LINK等仿真器进行程序的调试和下载。</p><h4 id="项目中期"><a href="#项目中期" class="headerlink" title="项目中期"></a>项目中期</h4><p>我们绘制了PCB电路板，并且印刷出来进行了实物的测试，第一次实物测试发现了诸多的问题：</p><ol><li>LC12S 2.4G无线收发模块无法进行组网和通讯</li></ol><p>解决：我们花了数天时间对用户手册进行了详细的阅读，最后发现是模块协议命令传输速率设置错误，导致模块一直不能初始化，最后我们使用专门的串口调试工具实现了模块的初始化、组网和数据的无线传输。</p><ol start="2"><li>STM32F103C8T6与LC12S 2.4G模块进行通讯出现错误且无法调试</li></ol><p>解决：通过对原理图的仔细排查后发现硬件电路设计有缺陷，导致调试无法正常进行，最后我们设计并焊接了一个单独的测试电路来进行通讯的调试，完成了STM32F103C8T6与LC12S 2.4G无线收发模块的通信及数据传输。</p><ol start="3"><li>硬件电路无法实现单火取电</li></ol><p>中期未解决</p><h4 id="项目后期"><a href="#项目后期" class="headerlink" title="项目后期"></a>项目后期</h4><p>在项目后期，我们更多的对硬件电路进行了研究与设计，设计并绘制了PCB电路板，印刷了单火线取电无线开关的第二个版本，拿到第二个版本后对取电电路进行了测试，发现单火线取电电路依旧存在问题，能够取电，但无法对开关进行控制。通过对原理图的整体分析后发现，电路设计出现了很大的问题，导致开关一直处于开态，即控制电路无法对开关进行控制。</p><p>发现问题后，紧接着修改了单火线取电电路，印刷了单火线取电无线开关的第三个版本，拿到第三个版本的硬件后，立即进入了测试阶段，在测试过程中发现开关能够在闭态取电，且能够进行远程控制，但是在开关状态切换时控制芯片出现了供电不足导致复位，即刚打开开关立即又复位关闭了开关。</p><p>为了解决这个问题，又对电路进行了详细的测试和分析，设计了单火取电无线开关的第四个版本，拿到第四个版本后依旧发现同样的问题，刚打开开关主控芯片就因为供电不足复位了，这次我们花了很长时间对电路进行排查后发现，开态取电电路取到的电压很小，且经过稳压芯片转换后变得更小了，无法支撑芯片的正常运行。</p><p>最后考虑更换稳压芯片和低功耗的主控芯片，设计了单火线取电无线开关的第五个版本。我们对第五个版本进行了测试，基本达到了预期的要求，能够进行单火线开关的闭态和开态取电，且能够进行远程控制。</p><h3 id="人员分工："><a href="#人员分工：" class="headerlink" title="人员分工："></a>人员分工：</h3><p>余鑫，主要负责整个项目的进度安排、测试LC12S 2.4G无线收发模块，单火线取电电路的设计，完成项目的功能整合和调试工作。</p><p>曹俊，主要负责STM32的代码编写，以及在硬件电路上的代码调试工作。</p><hr><h2 id="项目实施过程中存在的问题和建议："><a href="#项目实施过程中存在的问题和建议：" class="headerlink" title="项目实施过程中存在的问题和建议："></a>项目实施过程中存在的问题和建议：</h2><ol><li><p>无线模块无法组网和数据传输问题：仔细阅读和分析用户手册，了解模块的详细操作和应用。</p></li><li><p>STM32和无线模块通讯问题：两者通过串口通讯，在串口设置时需要匹配串口波特率、起始位、停止位、校验位，一点问题都会导致通讯失败，而且STM32一定要设置好串口中断的各项标志，否则很容易出现串口无法正常工作。</p></li><li><p>主控芯片供电不足的问题：更换电源稳压芯片和低功耗主控芯片，一般的控制芯片需要稳定的电源供能，但单火线中取到的电压和电流是不稳定的，很容易导致芯片无法正常工作。</p></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>单火线开关</category>
      </categories>
      <tags>
        <tag>单火线</tag>
        <tag>开关</tag>
      </tags>
  </entry>
  <entry>
    <title>CC2530+Contiki+LCD12864</title>
    <url>/2019/04/17/CC2530-Contiki-LCD12864/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CC2530 + Contiki操作系统，使用LCD12864（SPI）。</p><p><img src="https://fishercloud.github.io/2019/04/17/CC2530-Contiki-DS18B20-LCD12864/LCD12864.png" alt="LCD12864" title="LCD12864"></p><h1 id="驱动代码"><a href="#驱动代码" class="headerlink" title="驱动代码"></a>驱动代码</h1><p>驱动代码放到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$PROJ_DIR\contiki3.0\contiki-3.0\platform\cc2530dk\dev</span><br></pre></td></tr></table></figure><p>不要忘了在工程里面添加</p><h2 id="lcd-dis-h"><a href="#lcd-dis-h" class="headerlink" title="lcd_dis.h"></a>lcd_dis.h</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifndef __LCD_DIS_h__</span><br><span class="line">#define __LCD_DIS_h__</span><br><span class="line"></span><br><span class="line">#define Dis_X_MAX       128-1</span><br><span class="line">#define Dis_Y_MAX       64-1</span><br><span class="line"></span><br><span class="line">//Define the MCU Register</span><br><span class="line"></span><br><span class="line">#define SPI_RES         P0_0</span><br><span class="line">#define SPI_SCK         P1_5</span><br><span class="line">#define SPI_SDA         P1_6</span><br><span class="line">#define SPI_CS          P1_2</span><br><span class="line"></span><br><span class="line">//  write your header here</span><br><span class="line">extern void TimeDelay( unsigned int Timers );</span><br><span class="line">extern void LCD_Init( void );</span><br><span class="line">extern void SPI_SSSet( unsigned char Status );</span><br><span class="line">extern void SPI_Send( unsigned char Data );</span><br><span class="line"></span><br><span class="line">extern void FontSet( unsigned char Font_NUM, unsigned char Color );</span><br><span class="line">extern void FontSet_cn( unsigned char Font_NUM, unsigned char Color );</span><br><span class="line">extern void PutChar( unsigned char x, unsigned char y, unsigned char a );</span><br><span class="line">extern void PutString( unsigned char x, unsigned char y, unsigned char* p );</span><br><span class="line">extern void PutChar_cn( unsigned char x, unsigned char y, unsigned char* GB );</span><br><span class="line">extern void PutString_cn( unsigned char x, unsigned char y, unsigned char* p );</span><br><span class="line">extern void SetPaintMode( unsigned char Mode, unsigned char Color );</span><br><span class="line">extern void PutPixel( unsigned char x, unsigned char y );</span><br><span class="line">extern void Line( unsigned char s_x, unsigned char  s_y, unsigned char  e_x, unsigned char  e_y );</span><br><span class="line">extern void Circle( unsigned char x, unsigned char y, unsigned char r, unsigned char mode );</span><br><span class="line">extern void Rectangle( unsigned char left, unsigned char top, unsigned char right,</span><br><span class="line">                       unsigned char bottom, unsigned char mode );</span><br><span class="line">extern void ClrScreen( void );</span><br><span class="line">extern void PutBitmap( unsigned char x, unsigned char y, unsigned char width, unsigned char high, unsigned char* p );</span><br><span class="line">extern void FontMode( unsigned char Cover, unsigned char Color );</span><br><span class="line">extern void ShowChar( unsigned char x, unsigned char y, unsigned char a, unsigned char type ) ;</span><br><span class="line">extern void ShowShort( unsigned char x, unsigned char y, unsigned short a, unsigned char type ) ;</span><br><span class="line">extern void SetBackLight( unsigned char Deg );</span><br><span class="line"></span><br><span class="line">extern unsigned char X_Witch;</span><br><span class="line">extern unsigned char Y_Witch;</span><br><span class="line">extern unsigned char X_Witch_cn;</span><br><span class="line">extern unsigned char Y_Witch_cn;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="lcd-dis-c"><a href="#lcd-dis-c" class="headerlink" title="lcd_dis.c"></a>lcd_dis.c</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//========================================================================</span><br><span class="line">// 文件名:  LCD_Dis.c</span><br><span class="line">// 日  期: 2009/02/10</span><br><span class="line">// 描  述:  LCD显示模块驱动V1.0版</span><br><span class="line">//          基本功能接口函数集</span><br><span class="line">//</span><br><span class="line">// 参  考: 无</span><br><span class="line">// 版  本:</span><br><span class="line">//      2009/02/10      First version</span><br><span class="line">//========================================================================</span><br><span class="line"></span><br><span class="line">#include &quot;LCD_Dis.h&quot;</span><br><span class="line">#include &quot;port.h&quot;</span><br><span class="line">#include &quot;cc253x.h&quot;</span><br><span class="line">#include &quot;sys/clock.h&quot;</span><br><span class="line">#include &quot;port.h&quot;</span><br><span class="line"></span><br><span class="line">unsigned char X_Witch = 6;</span><br><span class="line">unsigned char Y_Witch = 10;</span><br><span class="line">unsigned char X_Witch_cn = 16;</span><br><span class="line">unsigned char Y_Witch_cn = 16;</span><br><span class="line">unsigned char Dis_Zero = 0;</span><br><span class="line"></span><br><span class="line">void LcdPortInit()</span><br><span class="line">&#123;</span><br><span class="line">    PORT_DIR_OUTPUT( 0, 0 );</span><br><span class="line">    PORT_DIR_OUTPUT( 1, 2 );</span><br><span class="line">    PORT_DIR_OUTPUT( 1, 5 );</span><br><span class="line">    PORT_DIR_OUTPUT( 1, 6 );</span><br><span class="line">    /*MAKE_IO_PIN_OUTPUT(P0_DIR, 0);            //</span><br><span class="line">    MAKE_IO_PIN_OUTPUT(P1_DIR, 2);</span><br><span class="line">    MAKE_IO_PIN_OUTPUT(P1_DIR, 5);          //</span><br><span class="line">    MAKE_IO_PIN_OUTPUT(P1_DIR, 6); */</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void LCD_Init(void)</span><br><span class="line">// 描述: LCD初始化程序，主要在里面完成端口初始化以及LCD模块的复位</span><br><span class="line">// 参数: 无</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2009/02/10      First version    Mz Design</span><br><span class="line">//========================================================================</span><br><span class="line">void TimeDelay( unsigned int Timers )</span><br><span class="line">&#123;</span><br><span class="line">    while( Timers-- )</span><br><span class="line">    &#123;</span><br><span class="line">        clock_delay_usec( 1000 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void LCD_Init( void )</span><br><span class="line">&#123;</span><br><span class="line">    LcdPortInit();</span><br><span class="line">    //SS和SCK预先设置为高电平</span><br><span class="line">    SPI_SCK = 1;</span><br><span class="line">    SPI_CS = 1;</span><br><span class="line">    //复位LCD模块</span><br><span class="line">    SPI_RES = 0;</span><br><span class="line">    TimeDelay( 50 );</span><br><span class="line">    //保持低电平大概2ms左右</span><br><span class="line">    SPI_RES = 1;</span><br><span class="line">    TimeDelay( 80 );                    //延时大概10ms左右</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void SPI_SSSet(unsigned char Status)</span><br><span class="line">// 描述: 置SS线状态</span><br><span class="line">// 参数: Status   =1则置高电平，=0则置低电平</span><br><span class="line">// 返回: 无</span><br><span class="line">// 版本:</span><br><span class="line">//      2009/02/10      First version    Mz Design</span><br><span class="line">//========================================================================</span><br><span class="line">void SPI_SSSet( unsigned char Status )</span><br><span class="line">&#123;</span><br><span class="line">    if( Status )            //判断是要置SS为低还是高电平？//SS置高电平</span><br><span class="line">    &#123;</span><br><span class="line">        SPI_CS = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else   //SS置低电平</span><br><span class="line">    &#123;</span><br><span class="line">        SPI_CS = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void SPI_Send(unsigned char Data)</span><br><span class="line">// 描述: 通过串行SPI口输送一个byte的数据置模组</span><br><span class="line">// 参数: Data 要传送的数据</span><br><span class="line">// 返回: 无</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/17      First version</span><br><span class="line">//      2007/07/24      V1.2 for MCS51 Keil C</span><br><span class="line">//========================================================================</span><br><span class="line">void SPI_Send( unsigned char Data )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char i = 0;</span><br><span class="line">    for( i = 0; i &lt; 8; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        //SCK置低</span><br><span class="line">        SPI_SCK = 0;</span><br><span class="line">        if( Data &amp; 0x0080 )</span><br><span class="line">        &#123;</span><br><span class="line">            SPI_SDA = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            SPI_SDA = 0;    //</span><br><span class="line">        &#125;</span><br><span class="line">        //SCK上升沿触发串行数据采样</span><br><span class="line">        SPI_SCK = 1;</span><br><span class="line">        Data = Data &lt;&lt; 1;                       //数据左移一位</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void FontSet(unsigned char Font_NUM,unsigned char Color)</span><br><span class="line">// 描述: ASCII字符字体设置</span><br><span class="line">// 参数: Font_NUM 字体选择,以驱动所带的字库为准</span><br><span class="line">//       Color  文本颜色,仅作用于ASCII字库</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void FontSet( unsigned char Font_NUM, unsigned char Color )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char ucTemp = 0;</span><br><span class="line">    if( Font_NUM == 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        X_Witch = 6;//7;</span><br><span class="line">        Y_Witch = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        X_Witch = 8;</span><br><span class="line">        Y_Witch = 16;</span><br><span class="line">    &#125;</span><br><span class="line">    ucTemp = ( Font_NUM &lt;&lt; 4 ) | Color;</span><br><span class="line">    //设置ASCII字符的字型</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x81 );               //传送指令0x81</span><br><span class="line">    SPI_Send( ucTemp );             //选择8X16的ASCII字体,字符色为黑色</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void FontMode(unsigned char Cover,unsigned char Color)</span><br><span class="line">// 描述: 设置字符显示覆盖模式</span><br><span class="line">// 参数: Cover  字符覆盖模式设置，0或1</span><br><span class="line">//       Color 覆盖模式为1时字符显示时的背景覆盖色</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2008/11/27      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void FontMode( unsigned char Cover, unsigned char Color )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char ucTemp = 0;</span><br><span class="line">    ucTemp = ( Cover &lt;&lt; 4 ) | Color;</span><br><span class="line">    //设置ASCII字符的字型</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x89 );               //传送指令0x81</span><br><span class="line">    SPI_Send( ucTemp );             //选择8X16的ASCII字体,字符色为黑色</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void FontSet_cn(unsigned char Font_NUM,unsigned char Color)</span><br><span class="line">// 描述: 汉字库字符字体设置</span><br><span class="line">// 参数: Font_NUM 字体选择,以驱动所带的字库为准</span><br><span class="line">//       Color  文本颜色,仅作用于汉字库</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void FontSet_cn( unsigned char Font_NUM, unsigned char Color )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char ucTemp = 0;</span><br><span class="line">    if( Font_NUM == 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        X_Witch_cn = 12;</span><br><span class="line">        Y_Witch_cn = 12;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        X_Witch_cn = 16;</span><br><span class="line">        Y_Witch_cn = 16;</span><br><span class="line">    &#125;</span><br><span class="line">    ucTemp = ( Font_NUM &lt;&lt; 4 ) | Color;</span><br><span class="line">    //设置ASCII字符的字型</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x82 );               //传送指令0x81</span><br><span class="line">    SPI_Send( ucTemp );             //选择8X16的ASCII字体,字符色为黑色</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void PutChar(unsigned char x,unsigned char y,unsigned char a)</span><br><span class="line">// 描述: 写入一个标准ASCII字符</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">//       a  要显示的字符在字库中的偏移量</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: ASCII字符可直接输入ASCII码即可</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void PutChar( unsigned char x, unsigned char y, unsigned char a )</span><br><span class="line">&#123;</span><br><span class="line">    //显示ASCII字符</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 7 );                  //传送指令0x07</span><br><span class="line">    SPI_Send( x );                  //要显示字符的左上角的X轴位置</span><br><span class="line">    SPI_Send( y );                  //要显示字符的左上角的Y轴位置</span><br><span class="line">    SPI_Send( a );                  //要显示字符ASCII字符的ASCII码值</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void PutString(int x,int y,char *p)</span><br><span class="line">// 描述: 在x、y为起始坐标处写入一串标准ASCII字符</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">//       p  要显示的字符串</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 仅能用于自带的ASCII字符串显示</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void PutString( unsigned char x, unsigned char y, unsigned char* p )</span><br><span class="line">&#123;</span><br><span class="line">    while( *p != 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        PutChar( x, y, *p );</span><br><span class="line">        x += X_Witch;</span><br><span class="line">        if( ( x + X_Witch ) &gt; Dis_X_MAX )</span><br><span class="line">        &#123;</span><br><span class="line">            x = Dis_Zero;</span><br><span class="line">            if( ( Dis_Y_MAX - y ) &lt; Y_Witch )</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                y += Y_Witch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void PutChar_cn(unsigned char x,unsigned char y,unsigned short * GB)</span><br><span class="line">// 描述: 写入一个二级汉字库汉字</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">//       a  GB码</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//      2007/07/24      V1.2 for MCS51 Keil C</span><br><span class="line">//========================================================================</span><br><span class="line">void PutChar_cn( unsigned char x, unsigned char y, unsigned char* GB )</span><br><span class="line">&#123;</span><br><span class="line">    //显示ASCII字符</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 8 );                  //传送指令0x08</span><br><span class="line">    SPI_Send( x );                  //要显示字符的左上角的X轴位置</span><br><span class="line">    SPI_Send( y );                  //要显示字符的左上角的Y轴位置</span><br><span class="line">    SPI_Send( *( GB++ ) ); //传送二级字库中汉字GB码的高八位值</span><br><span class="line">    SPI_Send( *GB );    //传送二级字库中汉字GB码的低八位值</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void PutString_cn(unsigned char x,unsigned char y,unsigned short *p)</span><br><span class="line">// 描述: 在x、y为起始坐标处写入一串汉字字符</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">//       p  要显示的字符串</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 同PutChar_cn中的解释</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//      2007/07/24      V1.2 for MCS51 Keil C</span><br><span class="line">//========================================================================</span><br><span class="line">void PutString_cn( unsigned char x, unsigned char y, unsigned char* p )</span><br><span class="line">&#123;</span><br><span class="line">    while( *p != 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        if( *p &lt; 128 )</span><br><span class="line">        &#123;</span><br><span class="line">            PutChar( x, y, *p );</span><br><span class="line">            x += X_Witch + 1;</span><br><span class="line">            if( ( x/* + X_Witch*/ ) &gt; Dis_X_MAX )</span><br><span class="line">            &#123;</span><br><span class="line">                x = Dis_Zero;</span><br><span class="line">                if( ( Dis_Y_MAX - y ) &lt; Y_Witch )</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    y += Y_Witch_cn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            PutChar_cn( x, y, p );</span><br><span class="line">            x += X_Witch_cn + 1;</span><br><span class="line">            if( ( x/* + X_Witch_cn*/ ) &gt; Dis_X_MAX )</span><br><span class="line">            &#123;</span><br><span class="line">                x = Dis_Zero;</span><br><span class="line">                if( ( Dis_Y_MAX - y ) &lt; Y_Witch_cn )</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    y += Y_Witch_cn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p += 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void SetPaintMode(unsigned char Mode,unsigned char Color)</span><br><span class="line">// 描述: 绘图模式设置</span><br><span class="line">// 参数: Mode 绘图模式    Color  像素点的颜色,相当于前景色</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: Mode无效</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void SetPaintMode( unsigned char Mode, unsigned char Color )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char ucTemp = 0;</span><br><span class="line">    ucTemp = ( Mode &lt;&lt; 4 ) | Color;</span><br><span class="line">    //设置绘图模式</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x83 );               //传送指令0x83</span><br><span class="line">    SPI_Send( ucTemp );             //选择8X16的ASCII字体,字符色为黑色</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void PutPixel(unsigned char x,unsigned char y)</span><br><span class="line">// 描述: 在x、y点上绘制一个前景色的点</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 使用前景色</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void PutPixel( unsigned char x, unsigned char y )</span><br><span class="line">&#123;</span><br><span class="line">    //绘点操作</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 1 );                  //送指令0x01</span><br><span class="line">    SPI_Send( x );                  //送第一个数据,即设置点的X轴位置</span><br><span class="line">    SPI_Send( y );                  //点的Y轴位置</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void Line(unsigned char s_x,unsigned char  s_y,</span><br><span class="line">//                  unsigned char  e_x,unsigned char  e_y)</span><br><span class="line">// 描述: 在s_x、s_y为起始坐标，e_x、e_y为结束坐标绘制一条直线</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 使用前景色</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void Line( unsigned char s_x, unsigned char  s_y, unsigned char  e_x, unsigned char  e_y )</span><br><span class="line">&#123;</span><br><span class="line">    //绘制直线</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 2 );                  //送指令0x02</span><br><span class="line">    SPI_Send( s_x );                //起点X轴坐标</span><br><span class="line">    SPI_Send( s_y );                //起点Y轴坐标</span><br><span class="line">    SPI_Send( e_x );                //终点X轴坐标</span><br><span class="line">    SPI_Send( e_y );                //终点Y轴坐标</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void Circle(unsigned char x,unsigned char y,</span><br><span class="line">//                  unsigned char r,unsigned char mode)</span><br><span class="line">// 描述: 以x,y为圆心R为半径画一个圆(mode = 0) or 圆面(mode = 1)</span><br><span class="line">// 参数:</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 画圆函数执行较慢，如果MCU有看门狗，请作好清狗的操作</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void Circle( unsigned char x, unsigned char y, unsigned char r, unsigned char mode )</span><br><span class="line">&#123;</span><br><span class="line">    SPI_SSSet( 0 );</span><br><span class="line">    if( mode )</span><br><span class="line">    &#123;</span><br><span class="line">        SPI_Send( 6 );</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        SPI_Send( 5 );</span><br><span class="line">    &#125;</span><br><span class="line">    SPI_Send( x );</span><br><span class="line">    SPI_Send( y );</span><br><span class="line">    SPI_Send( r );</span><br><span class="line">    SPI_SSSet( 1 );</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void Rectangle(unsigned char left, unsigned char top, unsigned char right,</span><br><span class="line">//               unsigned char bottom, unsigned char mode)</span><br><span class="line">// 描述: 以x,y为圆心R为半径画一个圆(mode = 0) or 圆面(mode = 1)</span><br><span class="line">// 参数: left - 矩形的左上角横坐标，范围0到126</span><br><span class="line">//       top - 矩形的左上角纵坐标，范围0到62</span><br><span class="line">//       right - 矩形的右下角横坐标，范围1到127</span><br><span class="line">//       bottom - 矩形的右下角纵坐标，范围1到63</span><br><span class="line">//       Mode - 绘制模式，可以是下列数值之一：</span><br><span class="line">//              0:  矩形框（空心矩形）</span><br><span class="line">//              1:  矩形面（实心矩形）</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 画圆函数执行较慢，如果MCU有看门狗，请作好清狗的操作</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void Rectangle( unsigned char left, unsigned char top, unsigned char right,</span><br><span class="line">                unsigned char bottom, unsigned char mode )</span><br><span class="line">&#123;</span><br><span class="line">    SPI_SSSet( 0 );</span><br><span class="line">    if( mode )</span><br><span class="line">    &#123;</span><br><span class="line">        SPI_Send( 4 );</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        SPI_Send( 3 );</span><br><span class="line">    &#125;</span><br><span class="line">    SPI_Send( left );</span><br><span class="line">    SPI_Send( top );</span><br><span class="line">    SPI_Send( right );</span><br><span class="line">    SPI_Send( bottom );</span><br><span class="line">    SPI_SSSet( 1 );</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void ClrScreen(void)</span><br><span class="line">// 描述: 清屏函数，执行全屏幕清除</span><br><span class="line">// 参数:</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2007/07/19      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void ClrScreen( void )</span><br><span class="line">&#123;</span><br><span class="line">    //清屏操作</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x80 );               //送指令0x80</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void PutBitmap(unsigned char x,unsigned char y,unsigned char width,</span><br><span class="line">//                      unsigned char high,unsigned char *p)</span><br><span class="line">// 描述: 在x、y为起始坐标显示一个单色位图</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标</span><br><span class="line">//       width 位图的宽度</span><br><span class="line">//       high  位图的高度</span><br><span class="line">//       p  要显示的位图的字模首地址</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注: 无</span><br><span class="line">// 版本:</span><br><span class="line">//      2008/11/27      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void PutBitmap( unsigned char x, unsigned char y, unsigned char width, unsigned char high, unsigned char* p )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned short Dat_Num;</span><br><span class="line">    //unsigned short i;</span><br><span class="line">    unsigned char ucTemp = 0;</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x0e );</span><br><span class="line">    SPI_Send( x );</span><br><span class="line">    SPI_Send( y );</span><br><span class="line">    SPI_Send( width );</span><br><span class="line">    SPI_Send( high );</span><br><span class="line">    width = width + 0x07;</span><br><span class="line">    Dat_Num = ( width &gt;&gt; 3 ) * high;</span><br><span class="line">    while( Dat_Num-- )</span><br><span class="line">    &#123;</span><br><span class="line">        ucTemp++;</span><br><span class="line">        SPI_Send( *p );</span><br><span class="line">        if( ucTemp &gt; 250 )          //如果改换别的MCU时,这里可能需要适当的调整</span><br><span class="line">        &#123;</span><br><span class="line">            TimeDelay( 28 );        //以及此处,以保证前面传送到LCD模块中的数据已被处理完</span><br><span class="line">            ucTemp = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void ShowChar(unsigned char x,unsigned char y,unsigned char Num,unsigned char type)</span><br><span class="line">// 描述: 在x、y的位置为显示区域的左上角，显示一个unsigned char型数</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标    Num  要显示的8位宽度的数据  type  显示特性(0,1,2)</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2008/11/27      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void ShowChar( unsigned char x, unsigned char y, unsigned char a, unsigned char type )</span><br><span class="line">&#123;</span><br><span class="line">    //显示ASCII字符</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 11 );                 //传送指令0x0B</span><br><span class="line">    SPI_Send( x );                  //要显示字符的左上角的X轴位置</span><br><span class="line">    SPI_Send( y );                  //要显示字符的左上角的Y轴位置</span><br><span class="line">    SPI_Send( a );                  //要显示的数据</span><br><span class="line">    SPI_Send( type );</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void ShowShort(unsigned char x,unsigned char y,unsigned short Num,unsigned char type)</span><br><span class="line">// 描述: 在x、y的位置为显示区域的左上角，显示一个unsigned short型数（16位宽度）</span><br><span class="line">// 参数: x  X轴坐标     y  Y轴坐标    Num  要显示的16位宽度的数据  type  显示特性(0,1,2)</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2008/11/27      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void ShowShort( unsigned char x, unsigned char y, unsigned short a, unsigned char type )</span><br><span class="line">&#123;</span><br><span class="line">    //显示ASCII字符</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 12 );                 //传送指令0x0C</span><br><span class="line">    SPI_Send( x );                  //要显示字符的左上角的X轴位置</span><br><span class="line">    SPI_Send( y );                  //要显示字符的左上角的Y轴位置</span><br><span class="line">    SPI_Send( ( unsigned char )( a &gt;&gt; 8 ) );</span><br><span class="line">    SPI_Send( ( unsigned char )a );</span><br><span class="line">    SPI_Send( type );               //要显示字符ASCII字符的ASCII码值</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br><span class="line">//========================================================================</span><br><span class="line">// 函数: void SetBackLight(unsigned char Deg)</span><br><span class="line">// 描述: 设置背光亮度等级</span><br><span class="line">// 参数: Grade  0~127的等级</span><br><span class="line">// 返回: 无</span><br><span class="line">// 备注:</span><br><span class="line">// 版本:</span><br><span class="line">//      2008/11/27      First version</span><br><span class="line">//========================================================================</span><br><span class="line">void SetBackLight( unsigned char Deg )</span><br><span class="line">&#123;</span><br><span class="line">    //显示ASCII字符</span><br><span class="line">    SPI_SSSet( 0 );                 //SS置低电平</span><br><span class="line">    SPI_Send( 0x8a );               //传送指令0x07</span><br><span class="line">    SPI_Send( Deg );                //要显示字符的左上角的X轴位置</span><br><span class="line">    SPI_SSSet( 1 );                 //完成操作置SS高电平</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><p>测试代码放到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$PROJ_DIR\contiki3.0\contiki-3.0\examples\cc2530dk</span><br></pre></td></tr></table></figure><p>不要忘了添加到工程里面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;contiki.h&quot;</span><br><span class="line">#include &quot;dev/lcd_dis.h&quot;</span><br><span class="line"></span><br><span class="line">PROCESS( lcd_test, &quot;lcd_test&quot; );</span><br><span class="line">AUTOSTART_PROCESSES( &amp;lcd_test );</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*   主进程</span><br><span class="line">*/</span><br><span class="line">PROCESS_THREAD( lcd_test, ev, data )</span><br><span class="line">&#123;</span><br><span class="line">    PROCESS_BEGIN();</span><br><span class="line">    LCD_Init();</span><br><span class="line">    SetBackLight( 100 );            //设置背光的亮度等级为0</span><br><span class="line">    ClrScreen();                    //清屏</span><br><span class="line">    FontSet( 0, 1 );                //选择ASCII字符0(6X10),字符色为1(黑色)</span><br><span class="line">    PutChar( 10, 0, &apos;A&apos; );          //在指定位置显示字符A</span><br><span class="line">    FontSet( 1, 1 );                //选择ASCII字符1(8X16),字符色为1(黑色)</span><br><span class="line">    PutChar( 20, 0, &apos;A&apos; );          //在指定位置显示字符A</span><br><span class="line">    Rectangle( 64, 0, 127, 20, 1 ); //在指定位置绘制一个黑色的矩形作背景</span><br><span class="line">    FontSet( 1, 0 );                //选择ASCII字符1(8X16),字符色为0(白色)</span><br><span class="line">    FontMode( 0, 1 );               //设置字符覆盖模式为禁止，字符背景覆盖色为1</span><br><span class="line">    PutChar( 70, 1, &apos;B&apos; );          //显示ASCII字符</span><br><span class="line">    FontSet( 1, 1 );                //选择ASCII字符1(8X16),字符色为1(黑色)</span><br><span class="line">    FontMode( 1, 0 );               //设置字符覆盖模式为使能，字符背景覆盖色为0</span><br><span class="line">    PutChar( 80, 1, &apos;a&apos; );          //显示ASCII字符</span><br><span class="line">    PutString( 0, 17, &quot;Emdoor&quot; );   //在指定位置开始显示ASCII字符串</span><br><span class="line">    FontSet( 0, 1 );</span><br><span class="line">    PutString( 66, 23, &quot;--Emdoor04&quot; );</span><br><span class="line">    FontSet_cn( 1, 1 );</span><br><span class="line">    PutChar_cn( 10, 33, &quot;显&quot; );</span><br><span class="line">    PutString_cn( 40, 33, &quot;液晶测试&quot; );</span><br><span class="line">    FontSet_cn( 0, 1 );</span><br><span class="line">    PutChar_cn( 10, 50, &quot;显&quot; );</span><br><span class="line">    PutString_cn( 40, 50, &quot;汉字库液晶&quot; );</span><br><span class="line">    while( 1 );</span><br><span class="line">    PROCESS_END();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Contiki</category>
      </categories>
      <tags>
        <tag>Contiki</tag>
        <tag>CC2530</tag>
        <tag>LCD12864</tag>
      </tags>
  </entry>
  <entry>
    <title>CC2530+Contiki+DS18B20+LCD12864</title>
    <url>/2019/04/17/CC2530-Contiki-DS18B20-LCD12864/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CC2530 + Contiki操作系统，使用DS18B20温度传感器进行温度的采集和显示（串口打印和LCD显示）。</p><p><img src="/2019/04/17/CC2530-Contiki-DS18B20-LCD12864/串口输出.png" alt="串口输出" title="串口输出"></p><p><img src="/2019/04/17/CC2530-Contiki-DS18B20-LCD12864/LCD12864.png" alt="LCD12864" title="LCD12864"></p><hr><h1 id="驱动代码"><a href="#驱动代码" class="headerlink" title="驱动代码"></a>驱动代码</h1><p>LCD程序驱动参考CC2530+Contiki+LCD12864【<a href="https://fishercloud.github.io/2019/04/17/CC2530-Contiki-LCD12864/">传送门</a>】</p><h2 id="ds18b20-h"><a href="#ds18b20-h" class="headerlink" title="ds18b20.h"></a>ds18b20.h</h2><p>驱动代码放到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$PROJ_DIR\contiki3.0\contiki-3.0\platform\cc2530dk\dev</span><br></pre></td></tr></table></figure><p>不要忘了在工程里面添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifndef DS18B20_H_</span><br><span class="line">#define DS18B20_H_</span><br><span class="line"></span><br><span class="line">#include &quot;cc253x.h&quot;</span><br><span class="line">#include &quot;sys/clock.h&quot;</span><br><span class="line">/**************************************************</span><br><span class="line">  以下定义为DS18B20支持的所有命令</span><br><span class="line">***************************************************/</span><br><span class="line"></span><br><span class="line">#define SEARCH_ROM      0xF0              //搜索ROM</span><br><span class="line">#define READ_ROM        0x33              //读ROM</span><br><span class="line">#define MATCH_ROM       0x55              //匹配ROM(挂多个DS18B20时使用)</span><br><span class="line">#define SKIP_ROM        0xCC              //跳过匹配ROM(单个DS18B20时跳过)</span><br><span class="line">#define ALARM_SEARCH    0xEC              //警报搜索</span><br><span class="line"></span><br><span class="line">#define CONVERT_T       0x44              //开始转换温度</span><br><span class="line">#define WR_SCRATCHPAD   0x4E              //写便笺</span><br><span class="line">#define RD_SCRATCHPAD   0xBE              //读便笺</span><br><span class="line">#define CPY_CCTATCHPAD  0x48              //复制便笺</span><br><span class="line">#define RECALL_EE       0xB8              //未启用</span><br><span class="line">#define RD_PWR_SUPPLY   0xB4              //读电源供应</span><br><span class="line"></span><br><span class="line">#define DQ            P1_7                //DS18B20数据IO口</span><br><span class="line">#define DQ_DIR_OUT    0x80                //DS18B20 IO方向</span><br><span class="line">#define CL_DQ()     DQ = 0              //清除数据</span><br><span class="line">#define SET_DQ()    DQ = 1             //设置数据</span><br><span class="line">#define SET_OUT()   P1DIR |=  DQ_DIR_OUT  //设置IO方向,out设置IO方向为输出</span><br><span class="line">#define SET_IN()    P1DIR &amp;= ~DQ_DIR_OUT  //设置IO方向,in设备IO方向为输入</span><br><span class="line"></span><br><span class="line">extern void DS18B20_Write(unsigned char x); //DS18B20写命令</span><br><span class="line"></span><br><span class="line">extern unsigned char DS18B20_Read(void);    //DS18B20读数据</span><br><span class="line"></span><br><span class="line">extern void DS18B20_Init(void);             //DS18B20初始化/复位</span><br><span class="line"></span><br><span class="line">extern void DS18B20_SendConvert(void);      //发送转换温度命令</span><br><span class="line"></span><br><span class="line">extern void DS18B20_GetTem(unsigned char *integer, unsigned char *decimal);           //DS18B20获取温度</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="ds18b20-c"><a href="#ds18b20-c" class="headerlink" title="ds18b20.c"></a>ds18b20.c</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;ds18b20.h&quot;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *    写命令函数</span><br><span class="line"> *    输入参数：  命令（DS18B20.H中定义）</span><br><span class="line"> *    输出参数：  无</span><br><span class="line"> *    返回参数：  无</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">void DS18B20_Write( unsigned char cmd )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char i;</span><br><span class="line">    SET_OUT();                  //设置IO为输出，2530-&gt;DS18B20</span><br><span class="line">    /*每次一位，循环8次*/</span><br><span class="line">    for( i = 0; i &lt; 8; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        CL_DQ();              //IO为低</span><br><span class="line">        if( cmd &amp; ( 1 &lt;&lt; i ) )  //写数据从低位开始</span><br><span class="line">        &#123;</span><br><span class="line">            SET_DQ();           //IO输入高电平</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            CL_DQ();            //IO输出低电平</span><br><span class="line">        &#125;</span><br><span class="line">        clock_delay_usec( 40 );      //保持15~60us</span><br><span class="line">        SET_DQ();             //IO口拉高</span><br><span class="line">    &#125;</span><br><span class="line">    SET_DQ();                 //IO口拉高</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *    读数据函数</span><br><span class="line"> *    输入参数：  无</span><br><span class="line"> *    输出参数：  无</span><br><span class="line"> *    返回参数：  读取的数据</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">unsigned char DS18B20_Read( void )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char rdData;     //读出的数据</span><br><span class="line">    unsigned char i, dat;     //临时变量</span><br><span class="line">    rdData = 0;               //读出的数据初始化为0</span><br><span class="line">    /* 每次读一位，读8次 */</span><br><span class="line">    for( i = 0; i &lt; 8; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        CL_DQ();            //IO拉低</span><br><span class="line">        SET_DQ();           //IO拉高</span><br><span class="line">        SET_IN();           //设置IO方向为输入 DS18B20-&gt;CC2530</span><br><span class="line">        dat = DQ;           //读数据,从低位开始</span><br><span class="line">        if( dat )</span><br><span class="line">        &#123;</span><br><span class="line">            rdData |= ( 1 &lt;&lt; i ); //如果读出的数据位为正</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            rdData &amp;= ~( 1 &lt;&lt; i ); //如果读出的数据位为负</span><br><span class="line">        &#125;</span><br><span class="line">        clock_delay_usec( 70 );    //保持60~120us</span><br><span class="line">        SET_OUT();          //设置IO方向为输出 CC2530-&gt;DS18B20</span><br><span class="line">    &#125;</span><br><span class="line">    return ( rdData );      //返回读出的数据</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *    DS18B20初始化/复位函数</span><br><span class="line"> *    输入参数：  无</span><br><span class="line"> *    输出参数：  无</span><br><span class="line"> *    返回参数：  无</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">void DS18B20_Init( void )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char x = 60;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        SET_OUT();</span><br><span class="line">        SET_DQ();         //IO口拉高</span><br><span class="line">        CL_DQ();          //IO口拉低</span><br><span class="line">        clock_delay_usec( 500 ); //IO拉低后保持一段时间 480-960us</span><br><span class="line">        SET_DQ();         //释放</span><br><span class="line">        SET_IN();         //IO方向为输入 DS18B20-&gt;CC2530</span><br><span class="line">        clock_delay_usec( 20 );  //释放总线后等待15-60us</span><br><span class="line">    &#125;</span><br><span class="line">    while( x-- &amp;&amp; DQ ); /* 等待DQ变低 */</span><br><span class="line">    clock_delay_usec( 100 ); //检测到DQ 变低后，延时60-240us</span><br><span class="line">    SET_OUT();        //设置IO方向为输出 CC2530-&gt;DS18B20</span><br><span class="line">    SET_DQ();         //IO拉高</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *    DS18B20 转换温度函数</span><br><span class="line"> *    输入参数：  无</span><br><span class="line"> *    输出参数：  无</span><br><span class="line"> *    返回参数：  无</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">void DS18B20_SendConvert( void )</span><br><span class="line">&#123;</span><br><span class="line">    DS18B20_Init();               //复位18B20</span><br><span class="line">    DS18B20_Write( SKIP_ROM );    //发出跳过ROM匹配操作</span><br><span class="line">    DS18B20_Write( CONVERT_T );   //启动温度转换</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *    DS18B20获取温度函数</span><br><span class="line"> *    输入参数：  无</span><br><span class="line"> *    输出参数：  无</span><br><span class="line"> *    返回参数：  无</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">void DS18B20_GetTem( unsigned char* integer, unsigned char* decimal )</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char tem_h, tem_l;   //温度高位字节及低位字节</span><br><span class="line">    unsigned char a, b;           //临时变量</span><br><span class="line">    unsigned char flag;           //温度正负标记，正为0，负为1</span><br><span class="line">    unsigned char FRACTION_INDEX[16] = &#123;0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9 &#125;;//小数值查询表</span><br><span class="line">    DS18B20_Init();               //DS18B20复位</span><br><span class="line">    DS18B20_Write( SKIP_ROM );    //跳过ROM匹配</span><br><span class="line">    DS18B20_Write( RD_SCRATCHPAD ); //写便笺</span><br><span class="line">    tem_l = DS18B20_Read();       //读温度低位</span><br><span class="line">    tem_h = DS18B20_Read();       //读温度高位</span><br><span class="line">    /* 判断温度正负 */</span><br><span class="line">    if( tem_h &amp; 0x80 )</span><br><span class="line">    &#123;</span><br><span class="line">        flag = 1;                 //温度为负</span><br><span class="line">        a = ( tem_l &gt;&gt; 4 );       //取温度低4位原码</span><br><span class="line">        b = ( tem_h &lt;&lt; 4 ) &amp; 0xf0; //取温度高4位原码</span><br><span class="line">        tem_h = ~( a | b ) + 1;   //取整数部分数值，不符号位</span><br><span class="line">        tem_l = ~( a &amp; 0x0f ) + 1; //取小数部分原值，不含符号位</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        flag = 0;                 //为正</span><br><span class="line">        a = tem_h &lt;&lt; 4;</span><br><span class="line">        a += ( tem_l &amp; 0xf0 ) &gt;&gt; 4; //得到整数部分值</span><br><span class="line">        b = tem_l &amp; 0x0f;         //得出小数部分值</span><br><span class="line">        tem_h = a;                //整数部分</span><br><span class="line">        tem_l = b &amp; 0xff;         //小数部分</span><br><span class="line">    &#125;</span><br><span class="line">    *decimal = FRACTION_INDEX[tem_l]; //查表得小数值</span><br><span class="line">    *integer = tem_h | ( flag &lt;&lt; 7 ); //整数部分，包括符号位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="主进程代码"><a href="#主进程代码" class="headerlink" title="主进程代码"></a>主进程代码</h1><p>新建一个C文件，添加到以下目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$PROJ_DIR\contiki3.0\contiki-3.0\examples\cc2530dk</span><br></pre></td></tr></table></figure><p>不要忘了添加到工程里面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;contiki.h&quot;</span><br><span class="line">#include &quot;dev/ds18b20.h&quot;</span><br><span class="line">#include &quot;sys/clock.h&quot;</span><br><span class="line">#include &quot;lcd_dis.h&quot;</span><br><span class="line"></span><br><span class="line">PROCESS( get_ds18b20_val, &quot;get ds18b20 value&quot; );</span><br><span class="line">AUTOSTART_PROCESSES( &amp;get_ds18b20_val );</span><br><span class="line"></span><br><span class="line">unsigned char integer, decimal;</span><br><span class="line">char temp[20];</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * 自定义延时函数</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">void delay_ms( uint16_t dt )</span><br><span class="line">&#123;</span><br><span class="line">    while( dt-- )clock_delay_usec( 1000 );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*   主进程</span><br><span class="line">*/</span><br><span class="line">PROCESS_THREAD( get_ds18b20_val, ev, data )</span><br><span class="line">&#123;</span><br><span class="line">    PROCESS_BEGIN();</span><br><span class="line">    // DS18B20 初始化</span><br><span class="line">    DS18B20_SendConvert();</span><br><span class="line">    // LCD 初始化</span><br><span class="line">    LCD_Init();</span><br><span class="line">    SetBackLight( 0 );            //设置背光的亮度等级为0</span><br><span class="line">    ClrScreen();                    //清屏</span><br><span class="line">    FontSet_cn( 1, 1 );</span><br><span class="line">    FontSet( 1, 1 );</span><br><span class="line">    FontMode( 1, 0 );</span><br><span class="line">    </span><br><span class="line">    while( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">        DS18B20_SendConvert();</span><br><span class="line">        DS18B20_GetTem( &amp;integer, &amp;decimal );</span><br><span class="line"></span><br><span class="line">        if( integer &lt; 100 )</span><br><span class="line">        &#123;</span><br><span class="line">            ClrScreen();                    //清屏</span><br><span class="line">            sprintf( temp, &quot;当前温度:%d.%d℃&quot;, integer, decimal );</span><br><span class="line">            printf( &quot;%s\r\n&quot;, temp );</span><br><span class="line">            PutString_cn( 0, 0, temp );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( integer &gt; 31 )</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;当前温度过高！\r\n&quot;);</span><br><span class="line">            PutString_cn( 0, 16, &quot;当前温度过高!&quot; );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delay_ms( 1000 );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROCESS_END();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/2019/04/17/CC2530-Contiki-DS18B20-LCD12864/串口.gif" alt="串口" title="串口"></p><p><img src="/2019/04/17/CC2530-Contiki-DS18B20-LCD12864/LCD.gif" alt="LCD" title="LCD"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Contiki</category>
      </categories>
      <tags>
        <tag>Contiki</tag>
        <tag>CC2530</tag>
        <tag>DS18B20</tag>
        <tag>LCD12864</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MQTT的智能家庭网关研究与设计</title>
    <url>/2019/04/16/2019InnovativeTraining/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><p><em>基于MQTT的智能家庭网关研究与设计</em></p><center><br><h1><br>四川师范大学<br><br>大学生创新创业训练计划项目<br><br>申 报 书<br></h1><br></center><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:center">基于MQTT的智能家庭网关研究与设计</th></tr></thead><tbody><tr><td style="text-align:center">项目负责人</td><td style="text-align:center">余鑫</td></tr><tr><td style="text-align:center">学号</td><td style="text-align:center">2016110252</td></tr><tr><td style="text-align:center">性别</td><td style="text-align:center">男</td></tr><tr><td style="text-align:center">班级</td><td style="text-align:center">计算机科学学院2016级2班</td></tr><tr><td style="text-align:center">Email</td><td style="text-align:center"><a href="mailto:903426943@qq.com" target="_blank" rel="noopener">903426943@qq.com</a></td></tr><tr><td style="text-align:center">联系电话</td><td style="text-align:center">15984823634</td></tr></tbody></table><hr><h2 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h2><p>当前物联网中数据的增长大大超过了网络带宽的增速, 这对物联网通信提出了巨大挑战，且家庭网关在家庭物联网的中枢承载着必不可少的作用;而通信协议又是通信中的关键问题。论述了物联网对通信协议的要求, 并认为MQTT协议符合了物联网通信的要求。在此基础上决定自主开发基于MQTT协议的一种智能家庭网关，并且能够实现异构的智能家居设备进行无缝集成。</p><hr><h2 id="二、申请理由"><a href="#二、申请理由" class="headerlink" title="二、申请理由"></a>二、申请理由</h2><h3 id="立项依据"><a href="#立项依据" class="headerlink" title="立项依据"></a>立项依据</h3><p>随着科学技术的不断发展, 信息技术的不断提升, 互联网社会成为主流, 国家对物联网、互联网的大力支持, 使得物联网在不断地走进人们的生活, 成为我们生活中不可缺少的一部分。同时, 智能家居在此环境下得到了一定的发展, 以及广泛的使用, 随着人们的生活品质在不断的提升, 智能家居在一定程度上满足了人们对高水平生活的追求。所以, 物联网时代下的智能家居的发展成为了关键性问题, 现如今人们志在发展出安全性、艺术性的智能家居, 希望可以为社会的进步与发展做出更多的努力。</p><p>当前物联网风起云涌, 物联网连接的设备数量正在呈爆炸式速度递增, 确保从设备与云端之间可靠地进行双向的大规模数据传输以及确保数据传输的安全都是至关重要的。</p><p>在智能家居的网络信息传输中，是通过远程控制以及近程控制相互结合来完成最终的信息数据的传递与交流的。在信息传输系统的设计中，智能家居网关和外部服务器起着重要的作用，智能家居通过网关以及外部服务器的相互合作，共同来完成最终的信息的传递以及交流。在智能家居系统信息的传递中，网关对已经订阅的消息通过外部服务器的数据传输进行处理接收工作,同时，外部服务器通过自身的工作对网关发出的消息进行接收处理，达到数据的良好沟通。</p><h3 id="自身及团队具备的知识"><a href="#自身及团队具备的知识" class="headerlink" title="自身及团队具备的知识"></a>自身及团队具备的知识</h3><p>团队共5名成员，4人（余鑫、何润、袁政伟、仲治宇）来自计算机科学与技术（物联网方向）2016级2班成员，1人（贾苹）来自2018级计算机专业。</p><h4 id="自身具备的知识"><a href="#自身具备的知识" class="headerlink" title="自身具备的知识"></a>自身具备的知识</h4><ul><li>具备两年半的嵌入式开发经验</li><li>自主完成了多个嵌入式、物联网相关实例</li><li>能够熟练使用多种嵌入式设备进行开发（51单片机、STM32、树莓派、ARM9、CC2530等）</li><li>能够熟练使用Altium Designer软件进行PCB电路板绘制</li><li>熟悉Linux操作系统及相关命令</li><li>熟悉Qt开发</li><li>能够进行简单的Android程序开发</li></ul><h4 id="团队具备的知识"><a href="#团队具备的知识" class="headerlink" title="团队具备的知识"></a>团队具备的知识</h4><ul><li><p><strong>何润</strong></p><ul><li>熟悉嵌入式相关开发</li><li>熟悉网络安全相关算法</li><li>熟悉Qt、C#开发</li></ul></li><li><p><strong>袁政伟</strong></p><ul><li>具有Web服务器开发经验</li><li>熟悉服务器相关框架</li><li>熟悉Web、Android程序开发</li></ul></li><li><p><strong>仲治宇</strong></p><ul><li>能够熟练进行嵌入式相关开发</li><li>熟悉IOS、Android、Qt开发</li><li>熟悉Linux开发环境</li></ul></li><li><p><strong>贾苹</strong></p><ul><li>熟悉单片机开发</li><li>能够熟练编写传感器、家居控制等程序</li></ul></li></ul><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p>前期已经编写相应传感器程序及控制程序，且能够正确采集数据和控制，Zigbee模块组网正在测试中；能够对ARM9进行Linux移植，能够在ARM9部署简单的Qt应用程序；能够在云端部署Web服务器，并能完成简单的开发；能够在手机端连接本地服务器进行做简单的无线控制。</p><p><em>前期准备部分展示</em></p><p><img src="/2019/04/16/2019InnovativeTraining/前期1.jpg" alt></p><p><img src="/2019/04/16/2019InnovativeTraining/前期2.jpg" alt></p><h4 id="附部分参考文献"><a href="#附部分参考文献" class="headerlink" title="附部分参考文献"></a>附部分参考文献</h4><p>[1] 郭荣佐,郭进,黎明.智能家居中异构设备无缝集成的多协议网关设计[J].小型微型计算机系统,2015,36(10):2395-2402.<br>[2] 满莎,杨恢先,彭友,王绪四.基于ARM9的嵌入式无线智能家居网关设计[J].计算机应用,2010,30(09):2541-2544.<br>[3] 卢于辉,秦会斌.基于MQTT的智能家居系统的设计与实现[J].智能物联技术,2019,51(02):41-47.</p><hr><h2 id="三、项目方案与进度安排"><a href="#三、项目方案与进度安排" class="headerlink" title="三、项目方案与进度安排"></a>三、项目方案与进度安排</h2><h3 id="1、方案设计"><a href="#1、方案设计" class="headerlink" title="1、方案设计"></a>1、方案设计</h3><p><img src="/2019/04/16/2019InnovativeTraining/系统架构.png" alt="系统架构" title="系统架构"></p><p>图1 系统架构</p><h4 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h4><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p><p><img src="/2019/04/16/2019InnovativeTraining/mqtt-fidge-2.svg" alt="&quot;MQTT&quot;" title="MQTT"></p><p>图2 MQTT</p><h4 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h4><p>硬件设计包括三星的ARM9芯片S5P6818（家庭网关）、CC2530模块（协调器）、传感器终端（CC2530+Sensor）、家居控制终端（CC2530+Things），如下图所示。S5P6818上部署MQTT服务器作为家庭网关，负责对整个智能家居设备的管理以及环境监控。由于智能家居中许多家电设备都通过Zigbee（CC2530）无线传输网络来工作，因此在S5P6818上添加CC2530模块对整个Zigbee无线传输网络的数据融合处理，协调器负责家庭内部的Zigbee网络的管理与控制。S5P6818中的WiFi模块可以通过无线访问节点（Access Point，AP）路由器与以太网进行连接，实现家庭内部网络与Internet之间的通信。</p><p><img src="/2019/04/16/2019InnovativeTraining/硬件设计.png" alt="硬件设计" title="硬件设计"></p><p>图3 硬件设计</p><h4 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h4><p>软件设计包括MQTT服务器、Qt编写的网关应用程序、OpenWrt、云端Web服务器、云端数据库、智能终端APP，如下图所示。S5P6818家庭网关采用开源Linux操作系统，部署本地MQTT服务器并使用Qt编写网关应用程序，可以在本地管理和监控家居环境，也可把数据传送至云端服务器和数据库；云端采用CentOS操作系统作为服务器环境，部署web服务器和MySql数据库境；编写Android APP，能够连接云端服务器实现远程管理和监控家居环境。</p><p><img src="/2019/04/16/2019InnovativeTraining/软件设计.png" alt="软件设计" title="软件设计"></p><p>图4 软件设计</p><h3 id="2、进度安排"><a href="#2、进度安排" class="headerlink" title="2、进度安排"></a>2、进度安排</h3><h4 id="第一阶段（5月）"><a href="#第一阶段（5月）" class="headerlink" title="第一阶段（5月）"></a>第一阶段（5月）</h4><p>完成项目的详细文档、任务分工；</p><h4 id="第二阶段（6月-7月）"><a href="#第二阶段（6月-7月）" class="headerlink" title="第二阶段（6月-7月）"></a>第二阶段（6月-7月）</h4><p>绘制并印刷Zigbee模块的PCB，完成CC2530组网，能够使用传感器数据采集和家居控制；</p><h4 id="第三阶段（8月-9月）"><a href="#第三阶段（8月-9月）" class="headerlink" title="第三阶段（8月-9月）"></a>第三阶段（8月-9月）</h4><p>进行网关开发，部署MQTT服务器，进行Qt应用程序开发，同步进行Web服务器和Android APP开发；</p><h4 id="第四阶段（10月-11月）"><a href="#第四阶段（10月-11月）" class="headerlink" title="第四阶段（10月-11月）"></a>第四阶段（10月-11月）</h4><p>完成网关与Zigbee模块的通信，能够在S5P6818网关上处理CC2530传感器节点采集到的数据，能够实现本地管理和监控家居环境，并根据进度对网关的算法调度等进行优化；</p><h4 id="第五阶段（12月-1月）"><a href="#第五阶段（12月-1月）" class="headerlink" title="第五阶段（12月-1月）"></a>第五阶段（12月-1月）</h4><p>完成S5P6818网关和云端服务器的相关任务，完成Android APP功能开发，能够实现远程管理和监控家居环境；</p><h4 id="第六阶段（2月-4月）"><a href="#第六阶段（2月-4月）" class="headerlink" title="第六阶段（2月-4月）"></a>第六阶段（2月-4月）</h4><p>完成项目所有测试，编写项目报告。</p><hr><h2 id="四、项目特色和创新"><a href="#四、项目特色和创新" class="headerlink" title="四、项目特色和创新"></a>四、项目特色和创新</h2><p>MQTT的设计思想是开源、可靠、轻巧、简单，符合家居环境的要求，且拥有QOS0、QOS1、QOS2三种不同的服务质量，可以保证消息传输的可靠性。并且MQTT协议无需订阅者与发布者进行直连，这在一定程度上降低了设备随时进行消息传输的功耗，增强了移动设备进行远程管理和监控的可行性。能够将异构的智能家居设备进行无缝集成。</p><hr><h2 id="五、预测成果"><a href="#五、预测成果" class="headerlink" title="五、预测成果"></a>五、预测成果</h2><p>基本完成基于MQTT的智能家庭网关研究与设计，能够稳定的管理和监控家居环境。</p><hr><h2 id="六、项目经费支出预算"><a href="#六、项目经费支出预算" class="headerlink" title="六、项目经费支出预算"></a>六、项目经费支出预算</h2><table><thead><tr><th>序号</th><th>支出类型</th><th>金额</th><th>测试依据</th></tr></thead><tbody><tr><td>1</td><td>耗材</td><td>4000.00</td><td>电子元器件及相应测试模块</td></tr><tr><td>2</td><td>耗材</td><td>2000.00</td><td>印刷电路板（PCB）</td></tr><tr><td>3</td><td>耗材</td><td>1000.00</td><td>电路测试工具及焊接工具</td></tr><tr><td>4</td><td>印刷</td><td>500.00</td><td>资料印刷</td></tr><tr><td>5</td><td>图书资料</td><td>500.00</td><td>无线传感器网络、操作系统、数据处理、电路分析等相关图书资料</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>MQTT</category>
      </categories>
      <tags>
        <tag>MQTT</tag>
        <tag>智能网关</tag>
      </tags>
  </entry>
  <entry>
    <title>【单片机】基于单片机的智能语音控制系统</title>
    <url>/2019/04/05/LD3320A/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用语音识别芯片LD3320A配合使用STM32F103RXT6，实现语音识别，语音对话，家居控制。手机亦可通过APP连接ESP8266实现家居控制。</p><p><img src="/2019/04/05/LD3320A/1.png" alt="基于单片机的智能语音控制系统" title="基于单片机的智能语音控制系统"></p><p><img src="/2019/04/05/LD3320A/2.png" alt="基于单片机的智能语音控制系统" title="基于单片机的智能语音控制系统"></p><h1 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h1><p>四川师范大学-计算机科学学院</p><p>计算机科学与技术（物联网）</p><p>2016110205 陈加兰</p><p>2016110228 刘雨霜</p><p>2016110252 余鑫</p><h1 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h1><p><a href="https://github.com/FisherCloud/STM32-LD3320A" target="_blank" rel="noopener">传送门</a></p><h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>开发中，慢慢完善……</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>STM32F103C8T6</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】contiki for CC2530的IAR移植</title>
    <url>/2019/04/03/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91contiki-for-CC2530%E7%9A%84IAR%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="【引言】"><a href="#【引言】" class="headerlink" title="【引言】"></a>【引言】</h1><p>移植的必要性</p><p>通过移植Contiki到IAR环境，可以很清晰的查看contiki操作系统的细节，同时IAR开发环境支持CC2530在线仿真，这对于WSN网络是十分有用的，有效地。这也是为什么喜欢2530的原因。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过移植Contiki到IAR环境，可以很清晰的查看contiki操作系统的细节，同时IAR开发环境支持CC2530在线仿真，这对于WSN网络是十分有用的，有效地。这也是为什么喜欢2530的原因。</p><h2 id="你将学到"><a href="#你将学到" class="headerlink" title="你将学到"></a>你将学到</h2><ul><li>如何移植contiki到IAR环境。</li><li>关于移植的细节</li></ul><h1 id="【IAR文件路径】"><a href="#【IAR文件路径】" class="headerlink" title="【IAR文件路径】"></a>【IAR文件路径】</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$TOOLKIT_DIR$\INC\DLIB\C\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\cfs\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\ctk\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\dev\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\lib\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\loader\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\net\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\net\mac\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\net\rime\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\net\routing\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\core\sys\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\cpu\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\cpu\cc253x\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\cpu\cc253x\dev\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\platform\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\platform\cc2530dk\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\platform\cc2530dk\dev\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\examples\</span><br><span class="line">$PROJ_DIR$\contiki-2.7\examples\hello-world\</span><br></pre></td></tr></table></figure><h1 id="【相关宏定义】"><a href="#【相关宏定义】" class="headerlink" title="【相关宏定义】"></a>【相关宏定义】</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UIP_CONF_IPV6=1</span><br><span class="line">VP_CONFIG_H=&quot;contiki-conf.h</span><br></pre></td></tr></table></figure><h1 id="【GDCC到IAR的编译修改】"><a href="#【GDCC到IAR的编译修改】" class="headerlink" title="【GDCC到IAR的编译修改】"></a>【GDCC到IAR的编译修改】</h1><h2 id="1-asm未定义"><a href="#1-asm未定义" class="headerlink" title="(1) asm未定义"></a>(1) <strong>asm</strong>未定义</h2><p>GCC下关键字<strong>asm</strong>，等同于IAR的asm。不过，从文档《IAR C/C++ Compiler Reference Guide.pdf》来看，推荐使用关键字<strong>asm(英文原文：the asm keyword is not available when the option –strict is used. The </strong>asm keyword is always available)。在相应文件增加如下代码，即可解决：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifdef __IAR_SYSTEMS_ICC__</span><br><span class="line">#define __asm__ __asm</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="(2)变量"></a>(2)变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__xdata __at(0x0000) static unsigned long timer_value = 0;</span><br></pre></td></tr></table></figure><p>变成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static volatile unsigned long timer_value = 0;</span><br></pre></td></tr></table></figure><p>更恰当的修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//static CC_AT_DATA struct timer debouncetimer;</span><br></pre></td></tr></table></figure><p>变成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifdef SDCC</span><br><span class="line">static__data structtimer debouncetimer;</span><br><span class="line">#else</span><br><span class="line">staticstruct timer debouncetimer;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><strong>关于中断</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void 2 port_0_isr(void) __interrupt(P0INT_VECTOR)</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifdef SDCC</span><br><span class="line">void</span><br><span class="line">port_0_isr(void) __interrupt(P0INT_VECTOR)</span><br><span class="line">#else</span><br><span class="line">#pragma vector=P0INT_VECTOR</span><br><span class="line">__near_func __interrupt void port_0_isr(void)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>1， 根据iocc2530.h修改了cc253x.h</p><p>为了找到cc2530的IEEE Addres，在cc253x.h（改编自iocc2530.h）中添加了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define X_IEEE_ADDR   PXREG(0x780C )  /* Start of unique IEEE Address */</span><br></pre></td></tr></table></figure><p>2，中断服务函数 linux 下是SDCC 要改成IAR格式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void rtimer_isr(void) __interrupt(T1_VECTOR);</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifdef SDCC </span><br><span class="line">void port_0_isr(void) __interrupt(P0INT_VECTOR)</span><br><span class="line">#else</span><br><span class="line">#pragma vector=P0INT_VECTOR</span><br><span class="line">__near_func __interrupt void port_0_isr(void)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>此时还有90个错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//__xdata __at(0x0000) static unsigned long timer_value = 0;</span><br><span class="line">static volatile unsigned long timer_value = 0;</span><br></pre></td></tr></table></figure><p>修改了button-sensor.h 使之符合IAR格式</p><p>修改了button-sensor.c 清除了cc2531的情况</p><p>–这样做，不合算，仅是为了更快的修改而已，以后也要加上cc2531这种情况</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error[e46]: Undefined external&quot;BUTTON_IRQ_CHECK::?relay&quot;referredinbutton-sensor ( F:\Contiki OS\2530contiki2.7\Debug\Obj\</span><br><span class="line">Error[e46]: Undefined external&quot;BUTTON_IRQ_FLAG_OFF::?relay&quot;referredinbutton-sensor ( F:\Contiki OS\2530contiki2.7\Debug\Obj\</span><br><span class="line">Error[e27]: Entry&quot;rime_sniffer_add::?relay&quot;inmodule rime ( F:\Contiki OS\2530contiki2.7\Debug\Obj\rime.r51 ) redefinedinmodule</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相应的文件没有添加上 </span><br><span class="line"></span><br><span class="line">Error[e46]: Undefined external &quot;autostart_processes&quot; referred in contiki-main ( F:\Contiki OS\2530contiki2.7\Debug\Obj\contiki-main.r51 ) </span><br><span class="line"></span><br><span class="line">相应的文件没有添加上</span><br><span class="line"></span><br><span class="line">Error[e46]: Undefined external &quot;rtimer_arch_init::?relay&quot; referred in rtimer ( F:\Contiki OS\2530contiki2.7\Debug\Obj\rtimer.r51 ) </span><br><span class="line"></span><br><span class="line">相应的文件没有添加上 </span><br><span class="line"></span><br><span class="line">Error[e46]: Undefined external &quot;?DPL1&quot; referred in cc2530-rf ( F:\Contiki OS\2530contiki2.7\Debug\Obj\cc2530-rf.r51 )</span><br></pre></td></tr></table></figure><p>在8051def.h 屏蔽了部分宏（没用明确定义）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//#if !defined(__SDCC_mcs51) &amp;&amp; !defined(SDCC_mcs51)</span><br><span class="line">//#define __data</span><br><span class="line">//#define __xdata</span><br><span class="line">//#define __code</span><br><span class="line">//#define __bit bool</span><br><span class="line">//#define __sfr volatile unsigned char</span><br><span class="line">//#define __sbit volatile bool</span><br><span class="line">//#define __critical</span><br><span class="line">//#define __at(x)</span><br><span class="line">//#define __using(x)</span><br><span class="line">//#define __interrupt(x)</span><br><span class="line">//#define __naked</span><br><span class="line">//#endif</span><br></pre></td></tr></table></figure><p>在cc253x.h文件中主要修改了关于读取芯片MAC的地址，如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* ------------------------------------------------------------------------------------------------</span><br><span class="line"> *                                       Flash</span><br><span class="line"> * ------------------------------------------------------------------------------------------------</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">#define X_INFOPAGE  PXREG( 0x7800 )  /* Pointer to Start of Flash Information Page          */</span><br><span class="line">#define X_XBANK     PXREG( 0x8000 )  /* Pointer to Start of Selectable Flash Bank (XBANK)   */</span><br><span class="line">//#define X_IEEE_ADDR   PXREG(0x780C )  /* Start of unique IEEE Address */</span><br><span class="line">#define X_IEEE_ADDR (*(uint8_t*)(X_INFOPAGE + 0x0C))    /* Start of unique IEEE Address */</span><br><span class="line">#define OVFIM T1OVFIM</span><br></pre></td></tr></table></figure><p>主要是第8行，根据这个地址，程序可以读取芯片的MAC地址，由此作为网络IP或者节点IP等。<br>系统莫名其名重启—溢出问题和看门狗设置<br>1，修改看门狗启动— WDCTL|=0x08</p><p>2，溢出–适当减少XDATA；</p><p>编译器的bug—更改一次烧写 linker 换成128_banked.xcl <strong>(芯片对应版本)</strong> 就好了。</p><hr><p>作者：古鲁咕噜</p><p>来源：CSDN</p><p>原文：<a href="https://blog.csdn.net/zzuzpb/article/details/48090521" target="_blank" rel="noopener">https://blog.csdn.net/zzuzpb/article/details/48090521</a></p><p>版权声明：本文为博主原创文章，转载请附上博文链接！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Contiki</category>
      </categories>
      <tags>
        <tag>Contiki</tag>
        <tag>CC2530</tag>
        <tag>操作系统</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java Web开发环境配置</title>
    <url>/2019/03/13/Java-Web%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="Java-Web开发环境配置"><a href="#Java-Web开发环境配置" class="headerlink" title="Java Web开发环境配置"></a>Java Web开发环境配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java Web，是用Java技术来解决相关web互联网领域的技术总和。web包括：web服务器和web客户端两部分。Java在客户端的应用有java applet，不过使用得很少，Java在服务器端的应用非常的丰富，比如Servlet，JSP和第三方框架等等。Java技术对Web领域的发展注入了强大的动力。Java Web基于JavaEE平台开发。</p><p><img src="/2019/03/13/Java-Web开发环境配置/JavaEE.jpg" alt="Java EE.jpg" title="Java EE.jpg"></p><h2 id="第一步、安装配置JDK、JRE"><a href="#第一步、安装配置JDK、JRE" class="headerlink" title="第一步、安装配置JDK、JRE"></a>第一步、安装配置JDK、JRE</h2><p>JDK配置已在另一篇博客中详细讲解，若还没有配置JDK和JRE，请点击<a href="https://fishercloud.github.io/2019/03/09/JDK安装配置/">传送门</a></p><h2 id="第二步、安装配置Tomcat服务器"><a href="#第二步、安装配置Tomcat服务器" class="headerlink" title="第二步、安装配置Tomcat服务器"></a>第二步、安装配置Tomcat服务器</h2><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网传送门</a></p><h3 id="Tomcat简介"><a href="#Tomcat简介" class="headerlink" title="Tomcat简介"></a>Tomcat简介</h3><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。目前Tomcat最新版本为9.0。</p><h3 id="Tomcat下载"><a href="#Tomcat下载" class="headerlink" title="Tomcat下载"></a>Tomcat下载</h3><p>根据自己的情况，选择任意版本下载即可，截止2019/3/13最新版本</p><p>Tomcat 7.0.93：</p><p><a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.93/bin/apache-tomcat-7.0.93-windows-x86.zip" target="_blank" rel="noopener">Windows 32位传送门</a></p><p><a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.93/bin/apache-tomcat-7.0.93-windows-x64.zip" target="_blank" rel="noopener">Windows 64位传送门</a></p><p><a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.93/bin/apache-tomcat-7.0.93.exe" target="_blank" rel="noopener">Windows 32/64位安装程序传送门</a></p><p>Tomcat 8.5.38：</p><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.38/bin/apache-tomcat-8.5.38-windows-x86.zip" target="_blank" rel="noopener">Windows 32位传送门</a></p><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.38/bin/apache-tomcat-8.5.38-windows-x64.zip" target="_blank" rel="noopener">Windows 64位传送门</a></p><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.38/bin/apache-tomcat-8.5.38.exe" target="_blank" rel="noopener">Windows 32/64位安装程序传送门</a></p><p>Tomcat 9.0.16：</p><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.16/bin/apache-tomcat-9.0.16-windows-x86.zip" target="_blank" rel="noopener">Windows 32位传送门</a></p><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.16/bin/apache-tomcat-9.0.16-windows-x64.zip" target="_blank" rel="noopener">Windows 64位传送门</a></p><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.16/bin/apache-tomcat-9.0.16.exe" target="_blank" rel="noopener">Windows 32/64位安装程序传送门</a></p><h3 id="配置Tomcat本地运行环境"><a href="#配置Tomcat本地运行环境" class="headerlink" title="配置Tomcat本地运行环境"></a>配置Tomcat本地运行环境</h3><ol><li><p>首先将下载的压缩包解压到D盘，或者使用安装程序安装到D盘</p></li><li><p>添加变量CATALINA_HOME到环境变量，变量值为Tomcat解压路径</p><p>例如：<br>|变量名|变量值|<br>|:–|:–|<br>|CATALINA_HOME|D:\appache-tomcat-8.5.38|</p><p>这里的变量值为你的Tomcat根目录</p></li></ol><h3 id="测试运行Tomcat"><a href="#测试运行Tomcat" class="headerlink" title="测试运行Tomcat"></a>测试运行Tomcat</h3><ol><li><p>进入Tomcat安装路径下的bin目录，双击startup.bat文件，如果正常输出启动信息，并未输出任何异常，则Tomcat安装正确。（注意：弹出的命令窗口不能关闭，否则服务器将停止运行）</p><p><img src="/2019/03/13/Java-Web开发环境配置/Tomcat.png" alt="Tomcat.png" title="Tomcat.png"></p></li><li><p>打开浏览器，在地址栏输入地址<a href="http://localhost:8080/或者http://127.0.0.1:8080/，如果能打开Tomcat配置页面，说明Tomcat配置成功。" target="_blank" rel="noopener">http://localhost:8080/或者http://127.0.0.1:8080/，如果能打开Tomcat配置页面，说明Tomcat配置成功。</a></p><p><img src="/2019/03/13/Java-Web开发环境配置/Tomcat1.png" alt="Tomcat配置页面.png" title="Tomcat配置页面.png"></p></li><li><p>在Tomcat开启的命令提示界面按下Ctrl+C键，将关闭Tomcat服务器。再次访问Tomcat配置页面，若出现网页不能访问，则说明Tomcat关闭成功。</p><p><img src="/2019/03/13/Java-Web开发环境配置/Tomcat关闭.png" alt="Tomcat关闭.png" title="Tomcat关闭.png"></p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>感谢阅读，后面将继续讲解使用Eclipse和IDEA新建Java Web工程</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java Web</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>【Android】Button的几种点击事件实现方法</title>
    <url>/2019/03/12/Android-Button%E7%9A%84%E5%87%A0%E7%A7%8D%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="Button的几种点击事件实现方法"><a href="#Button的几种点击事件实现方法" class="headerlink" title="Button的几种点击事件实现方法"></a>Button的几种点击事件实现方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Button介绍"><a href="#Button介绍" class="headerlink" title="Button介绍:"></a>Button介绍:</h3><p>Button(按钮)继承自TextView，在Android开发中，Button是常用的控件，用起来也很简单，你可以在界面xml描述文档中定义，也可以在程序中创建后加入到界面中，其效果都是一样的。不过最好是在xml文档中定义，因为一旦界面要改变是话，直接修改一下xml就行了，不用修改Java程序，并且在xml中定义层次分明，一目了然。</p><h4 id="Button-支持的-XML-属性及相关方法"><a href="#Button-支持的-XML-属性及相关方法" class="headerlink" title="Button 支持的 XML 属性及相关方法"></a>Button 支持的 XML 属性及相关方法</h4><table><thead><tr><th style="text-align:center">XML 属性</th><th style="text-align:left">相关方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">android:clickable</td><td style="text-align:left">setClickable(boolean clickable)</td><td style="text-align:left">设置是否允许点击。<br>clickable=true:允许点击<br>clickable=false:禁止点击</td></tr><tr><td style="text-align:center">android:background</td><td style="text-align:left">setBackgroundResource(int resid)</td><td style="text-align:left">通过资源文件设置背景色。<br>resid:资源xml文件ID<br>按钮默认背景为android.R.drawable.btn_default</td></tr><tr><td style="text-align:center">android:text</td><td style="text-align:left">setText(CharSequence text)</td><td style="text-align:left">设置文字</td></tr><tr><td style="text-align:center">android:textColor</td><td style="text-align:left">setTextColor(int color)</td><td style="text-align:left">设置文字颜色</td></tr><tr><td style="text-align:center">android:onClick</td><td style="text-align:left">setOnClickListener(OnClickListener l)</td><td style="text-align:left">设置点击事件</td></tr></tbody></table><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p><img src="/2019/03/12/Android-Button的几种点击事件实现方法/layout.png" alt="示例.png" title="示例.png"></p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/2019/03/12/Android-Button的几种点击事件实现方法/layout1.png" alt="示例.png" title="示例.png"><img src="/2019/03/12/Android-Button的几种点击事件实现方法/layout2.png" alt="示例.png" title="示例.png"></p><h2 id="第一种、匿名内部类方法实现"><a href="#第一种、匿名内部类方法实现" class="headerlink" title="第一种、匿名内部类方法实现"></a>第一种、匿名内部类方法实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    Integer flipCount = 0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button cardbutton = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 匿名内部类实现按钮点击事件</span><br><span class="line">         */</span><br><span class="line">        cardbutton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line"></span><br><span class="line">                switch (v.getId()) &#123;</span><br><span class="line">                    case R.id.cardButton:</span><br><span class="line"></span><br><span class="line">                        Button btn = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">                        if (btn.getText() == &quot;&quot;) &#123;</span><br><span class="line">                            btn.setText(&quot;A♥&quot;);</span><br><span class="line">                            btn.setBackgroundResource(R.drawable.blankcard);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            btn.setText(&quot;&quot;);</span><br><span class="line">                            btn.setBackgroundResource(R.drawable.stanfordtree);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        flipCount++;</span><br><span class="line"></span><br><span class="line">                        TextView textView = findViewById(R.id.textView);</span><br><span class="line">                        textView.setText(&quot;您已经点击&quot; + flipCount + &quot;次卡片&quot;);</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种、自定义点击事件实现，继承View-OnClickListener"><a href="#第二种、自定义点击事件实现，继承View-OnClickListener" class="headerlink" title="第二种、自定义点击事件实现，继承View.OnClickListener"></a>第二种、自定义点击事件实现，继承View.OnClickListener</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity  &#123;</span><br><span class="line"></span><br><span class="line">    Integer flipCount = 0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button cardbutton = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 自定义点击事件实现，继承View.OnClickListener</span><br><span class="line">         */</span><br><span class="line">        cardbutton.setOnClickListener(new MyOnClicklistener());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class MyOnClicklistener implements View.OnClickListener &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            switch (v.getId()) &#123;</span><br><span class="line">                case R.id.cardButton:</span><br><span class="line"></span><br><span class="line">                    Button btn = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">                    if (btn.getText() == &quot;&quot;) &#123;</span><br><span class="line">                        btn.setText(&quot;A♥&quot;);</span><br><span class="line">                        btn.setBackgroundResource(R.drawable.blankcard);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        btn.setText(&quot;&quot;);</span><br><span class="line">                        btn.setBackgroundResource(R.drawable.stanfordtree);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    flipCount++;</span><br><span class="line"></span><br><span class="line">                    TextView textView = findViewById(R.id.textView);</span><br><span class="line">                    textView.setText(&quot;您已经点击&quot; + flipCount + &quot;次卡片&quot;);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三种、Activity继承View-OnClickListener，由Activity实现OnClick-View-v-方法"><a href="#第三种、Activity继承View-OnClickListener，由Activity实现OnClick-View-v-方法" class="headerlink" title="第三种、Activity继承View.OnClickListener，由Activity实现OnClick(View v)方法"></a>第三种、Activity继承View.OnClickListener，由Activity实现OnClick(View v)方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity implements OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    Integer flipCount = 0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        switch (v.getId()) &#123;</span><br><span class="line">            case R.id.cardButton:</span><br><span class="line"></span><br><span class="line">                Button btn = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">                if (btn.getText() == &quot;&quot;) &#123;</span><br><span class="line">                    btn.setText(&quot;A♥&quot;);</span><br><span class="line">                    btn.setBackgroundResource(R.drawable.blankcard);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    btn.setText(&quot;&quot;);</span><br><span class="line">                    btn.setBackgroundResource(R.drawable.stanfordtree);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                flipCount++;</span><br><span class="line"></span><br><span class="line">                TextView textView = findViewById(R.id.textView);</span><br><span class="line">                textView.setText(&quot;您已经点击&quot; + flipCount + &quot;次卡片&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button cardbutton = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Activity继承View.OnClickListener，由Activity实现OnClick(View v)方法</span><br><span class="line">         */</span><br><span class="line">        cardbutton.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四种、Xml添加监听属性"><a href="#第四种、Xml添加监听属性" class="headerlink" title="第四种、Xml添加监听属性"></a>第四种、Xml添加监听属性</h2><p>注意android:onClick属性设置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:id=&quot;@+id/cardButton&quot;</span><br><span class="line">    android:layout_width=&quot;100dp&quot;</span><br><span class="line">    android:layout_height=&quot;120dp&quot;</span><br><span class="line">    android:layout_marginStart=&quot;8dp&quot;</span><br><span class="line">    android:layout_marginTop=&quot;8dp&quot;</span><br><span class="line">    android:layout_marginEnd=&quot;8dp&quot;</span><br><span class="line">    android:layout_marginBottom=&quot;8dp&quot;</span><br><span class="line">    android:onClick=&quot;doClick&quot;</span><br><span class="line">    android:text=&quot;@string/card_name&quot;</span><br><span class="line">    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">    app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">    app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    Integer flipCount = 0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Xml添加监听属性</span><br><span class="line">     * @param v</span><br><span class="line">     */</span><br><span class="line">    protected void doClick(View v) &#123;</span><br><span class="line">        switch (v.getId()) &#123;</span><br><span class="line">            case R.id.cardButton:</span><br><span class="line">                Button btn = findViewById(R.id.cardButton);</span><br><span class="line"></span><br><span class="line">                if (btn.getText() == &quot;&quot;) &#123;</span><br><span class="line">                    btn.setText(&quot;A♥&quot;);</span><br><span class="line">                    btn.setBackgroundResource(R.drawable.blankcard);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    btn.setText(&quot;&quot;);</span><br><span class="line">                    btn.setBackgroundResource(R.drawable.stanfordtree);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                flipCount++;</span><br><span class="line"></span><br><span class="line">                TextView textView = findViewById(R.id.textView);</span><br><span class="line">                textView.setText(&quot;您已经点击&quot; + flipCount + &quot;次卡片&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>【51单片机】4-点亮LED灯</title>
    <url>/2019/03/10/4-%E7%82%B9%E4%BA%AELED%E7%81%AF/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="点亮LED灯"><a href="#点亮LED灯" class="headerlink" title="点亮LED灯"></a>点亮LED灯</h1><h2 id="LED（发光二极管）的介绍"><a href="#LED（发光二极管）的介绍" class="headerlink" title="LED（发光二极管）的介绍"></a>LED（发光二极管）的介绍</h2><p>LED全称为半导体发光二极管，采用半导体材料制成的，以直接将电能转化为光能，电号转换成光信号的发光器件；其特点是功耗低、高亮度、色彩艳丽、抗振动、寿命长（正常发光8-10万小时）、冷光源等优点，是真正“绿色照明”。以LED为光源的灯饰产品在21世纪的将来，必然取代白织灯，成为人类照明的又一次革命。</p><p><img src="/2019/03/10/4-点亮LED灯/LED灯.png" alt="LED灯" title="LED灯"></p><h2 id="LED工作参数"><a href="#LED工作参数" class="headerlink" title="LED工作参数"></a>LED工作参数</h2><ul><li>普通发光二极管工作电压压降为：</li><li>1.6v ~ 2.1 v</li><li>工作电流为：<br><br>1~20ma</li><li>根据欧姆定律我们可以算出<br><br>A（电流）=V（电压）/R（电阻）<br><br>可以算出电阻的阻值可以在150欧~3000欧之间</li></ul><h2 id="画出仿真电路"><a href="#画出仿真电路" class="headerlink" title="画出仿真电路"></a>画出仿真电路</h2><p><img src="/2019/03/10/4-点亮LED灯/仿真电路.png" alt="仿真电路" title="仿真电路"></p><h2 id="编写LED灯的点亮程序"><a href="#编写LED灯的点亮程序" class="headerlink" title="编写LED灯的点亮程序"></a>编写LED灯的点亮程序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @Description: 随机点亮LED灯(流水灯)</span><br><span class="line"> * @Author: 鱼摆摆</span><br><span class="line"> * @Github: https://github.com/FisherCloud</span><br><span class="line"> * @Date: 2018-12-25 12:57:51</span><br><span class="line"> * @LastEditTime: 2019-03-10 09:26:28</span><br><span class="line"> */</span><br><span class="line">#include &lt;reg52.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define LED P0</span><br><span class="line"></span><br><span class="line">void delay(unsigned int z)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int x, y;</span><br><span class="line"></span><br><span class="line">    for (x = z; x &gt; 0; x--)</span><br><span class="line">        for (y = 110; y &gt; 0; y--)</span><br><span class="line">            ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int r = 0;</span><br><span class="line"></span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        r = rand() % 256;</span><br><span class="line">        LED = r;</span><br><span class="line">        delay(100);</span><br><span class="line">    &#125; while (1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2019/03/10/4-点亮LED灯/LED.gif" alt="流水灯.gif" title="流水灯.gif"></p><p>如果你觉得有什么不足，欢迎在下方评论区留言</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>【51单片机】3-51单片机最小系统</title>
    <url>/2019/03/09/3-51%E5%8D%95%E7%89%87%E6%9C%BA%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="51单片机最小系统"><a href="#51单片机最小系统" class="headerlink" title="51单片机最小系统"></a>51单片机最小系统</h1><h2 id="电平特性"><a href="#电平特性" class="headerlink" title="电平特性"></a>电平特性</h2><p>单片机是一种数字集成芯片，数字电路中只有两种电平:高电平和低电平。<br>我们学习的单片机呢就是TTL电平，其中高电平是5V，低电平是0V。</p><ul><li><p>TTL电平信号被利用的最多是因为通常数据表示采用二进制规定，+5V等价于逻辑“1”，0V等价于逻辑“0”，这被称做TTL（晶体管-晶体管逻辑电平）信号系统，这是计算机处理器控制的设备内部各部分之间通信的标准技术。</p></li><li><p>数字电路中，由TTL电子元器件组成电路使用的电平。电平是个电压范围，规定输出高电平&gt;2.4V,输出低电平&lt;0.4V。在室温下，一般输出高电平是3.5V，输出低电平是0.2V。最小输入高电平和低电平：输入高电平&gt;=2.0V，输入低电平&lt;=0.8V</p></li></ul><p>计算机串口用的是MAX232电平，其中高电平是-12V，低电平是+12V。</p><h2 id="51单片机IO口介绍"><a href="#51单片机IO口介绍" class="headerlink" title="51单片机IO口介绍"></a>51单片机IO口介绍</h2><p><img src="/2019/03/09/3-51单片机最小系统/51单片机IO口介绍.png" alt="51单片机IO口介绍" title="51单片机IO口介绍"></p><h2 id="单片机最小系统的组成"><a href="#单片机最小系统的组成" class="headerlink" title="单片机最小系统的组成"></a>单片机最小系统的组成</h2><p><img src="/2019/03/09/3-51单片机最小系统/单片机最小系统的组成.png" alt="单片机最小系统的组成" title="单片机最小系统的组成"></p><h2 id="什么是机器周期"><a href="#什么是机器周期" class="headerlink" title="什么是机器周期"></a>什么是机器周期</h2><ul><li><p>振荡周期: 也称时钟周期, 是指为单片机提供时钟脉冲信号的振荡源的周期。</p></li><li><p>机器周期: 一个机器周期包含 12 个时钟周期。 在一个机器周期内, CPU可以完成一个独立的操作。</p></li></ul><p>如果你觉得有什么不足，欢迎在下方评论区留言</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>【51单片机】2-C语言基础</title>
    <url>/2019/03/09/2-C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="什么是十进制"><a href="#什么是十进制" class="headerlink" title="什么是十进制"></a>什么是十进制</h3><p>我们生活中常用的就是十进制数，十进制就是我们所说的0—9十个数，平时的计数都是按十进制计算的，比如“我们班一共有25个同学”其中的“25”就是十进制数。十进制是逢十进一，借一当时十。</p><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><ul><li><p>二进制是逢二进一，借一当时二。</p></li><li><p>十进制和二进制的转换</p></li></ul><p><img src="/2019/03/09/2-C语言基础/二进制十进制转换.png" alt="二进制十进制转换" title="二进制十进制转换"></p><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><ul><li>我们常用的十进制的0-15在十六进制中表示为：0，1，2，3，4，5，6，7，8，9，A，B，C，D，E，F<br>其中从10-15是用A-F表示，字母不区分大小写</li></ul><p><img src="/2019/03/09/2-C语言基础/十六进制.png" alt="十六进制" title="十六进制"></p><h3 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h3><ul><li><p>十进制25</p><p>转二进制为： 0001 1001B</p><p>转十六进制为：19H</p><p>换算方法</p><p>十进制转二进制的换算方法：用25/2 每次取余数；</p><p>25/2 = 12 余1 ，12/2 = 6 余 0，6/2=3 余0 ，3/2= 1余 1，剩下1不能被2整除了。我们把最后剩下的数和他每一次的余数倒序写。</p><p>十进制转十六进制的换算方法：用25/16=1余9。十六进制为19</p></li></ul><h2 id="C语言简介"><a href="#C语言简介" class="headerlink" title="C语言简介"></a>C语言简介</h2><h3 id="C语言的发展史"><a href="#C语言的发展史" class="headerlink" title="C语言的发展史"></a>C语言的发展史</h3><ul><li>CPL -&gt; BCPL -&gt; B -&gt; C，其中：<ul><li>CPL（Combined programming Language），1963，英国剑桥；</li><li>BCPL（Basic Combined programming Language）， 1967，英国剑桥；</li><li>B，1970，美国贝尔</li><li>C，1972，美国贝尔（D.Ritchie)</li></ul></li><li>1973年，K.Thompson和D.Ritchie合作，将UNIX重写一遍，从此奠定了操作系统的基础。</li><li>1978年以后，C语言先后移植到大、中、小、微型机上。</li></ul><h3 id="C语言在语言体系中的地位"><a href="#C语言在语言体系中的地位" class="headerlink" title="C语言在语言体系中的地位"></a>C语言在语言体系中的地位</h3><p><img src="/2019/03/09/2-C语言基础/C语言在语言体系中的地位.png" alt="C语言在语言体系中的地位" title="C语言在语言体系中的地位"></p><h3 id="C语言的特点"><a href="#C语言的特点" class="headerlink" title="C语言的特点"></a>C语言的特点</h3><ul><li>语言简洁、紧凑、使用灵活</li><li>运算符丰富</li><li>具有数据类型构造能力</li><li>具有很强的流程控制结构</li><li>语言生成的代码质量高</li><li>可移植性较好</li><li>语言限制不够严格</li></ul><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><h3 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h3><ul><li>常量就是一个固定不变的值，变量就可以随时改变值的量比如5+a=b；<br>其中，5就是一个“常量”，而a，b就是一个“变量” ，变量的数值大小不<br>一样所占用的内存空间就不一样，我们为了有效的节省内存空间要把<br>变量和常量的数值范围进行定义，不同的数值范围所占用的内存大小<br>不一样。</li></ul><h3 id="位（bit）和字节（byte）"><a href="#位（bit）和字节（byte）" class="headerlink" title="位（bit）和字节（byte）"></a>位（bit）和字节（byte）</h3><ul><li><p>位<br><br>二进制数系统中，每个0或1就是一个位(bit)，位是内存的最小单位。</p></li><li><p>字节<br><br>字节(Byte):8位二进制称为一字节。</p></li></ul><h2 id="C语言中常用的数据类型"><a href="#C语言中常用的数据类型" class="headerlink" title="C语言中常用的数据类型"></a>C语言中常用的数据类型</h2><p><img src="/2019/03/09/2-C语言基础/C语言中常用的数据类型.png" alt="C语言中常用的数据类型" title="C语言中常用的数据类型"></p><h3 id="C语言扩充定义-C51-："><a href="#C语言扩充定义-C51-：" class="headerlink" title="C语言扩充定义(C51)："></a>C语言扩充定义(C51)：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sfr：特殊功能寄存器声明  如：sfr P0 = 0x80;</span><br><span class="line">sbit： 特殊功能位声明      如：sbit LED1 = P0^1；</span><br></pre></td></tr></table></figure><h3 id="C语言运算符"><a href="#C语言运算符" class="headerlink" title="C语言运算符"></a>C语言运算符</h3><ul><li><p>算术运算符：+ - * /<br><br>（加，减 ，乘 ，除）</p></li><li><p>位运算符： &amp; | ^ ~ &gt;&gt; &lt;&lt;<br><br>(按位与，按位或，按位异或，按位取反，左移，右移)</p></li><li><p>逻辑运算符： &gt; &gt;= &lt; &lt;= == != &amp;&amp; || !<br><br>(大于，大于等于，小于，小于等于，测试等于，测试不等于，逻辑与，逻辑或，逻辑非)</p></li></ul><h2 id="C语言常用的控制语句"><a href="#C语言常用的控制语句" class="headerlink" title="C语言常用的控制语句"></a>C语言常用的控制语句</h2><table><thead><tr><th style="text-align:left">语句</th><th style="text-align:left">释意</th></tr></thead><tbody><tr><td style="text-align:left">if()………else…..</td><td style="text-align:left">条件判断语句</td></tr><tr><td style="text-align:left">for()</td><td style="text-align:left">循环语句</td></tr><tr><td style="text-align:left">while()</td><td style="text-align:left">循环语句</td></tr><tr><td style="text-align:left">switch()</td><td style="text-align:left">多分支选择语句</td></tr></tbody></table><p>如果你觉得有什么不足，欢迎在下方评论区留言</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>51单片机</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>【51单片机】1-认识和了解51单片机</title>
    <url>/2019/03/09/1-%E8%AE%A4%E8%AF%86%E5%92%8C%E4%BA%86%E8%A7%A351%E5%8D%95%E7%89%87%E6%9C%BA/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="了解和认识51单片机"><a href="#了解和认识51单片机" class="headerlink" title="了解和认识51单片机"></a>了解和认识51单片机</h1><h2 id="学习51单片机需要哪些基础知识"><a href="#学习51单片机需要哪些基础知识" class="headerlink" title="学习51单片机需要哪些基础知识"></a>学习51单片机需要哪些基础知识</h2><ul><li><p>会使用电脑</p></li><li><p>有C语言基础</p></li><li><p>了解简单的模拟电子和数字电路的知识</p></li></ul><h3 id="了解微型计算机的组成及应用形态"><a href="#了解微型计算机的组成及应用形态" class="headerlink" title="了解微型计算机的组成及应用形态"></a>了解微型计算机的组成及应用形态</h3><p><img src="/2019/03/09/1-认识和了解51单片机/微型计算机的硬件组成.png" alt="微型计算机的硬件组成" title="微型计算机的硬件组成"></p><h3 id="微型计算机的应用形态"><a href="#微型计算机的应用形态" class="headerlink" title="微型计算机的应用形态"></a>微型计算机的应用形态</h3><ul><li>将微处理器CPU、存储器（RAM、ROM）、基本输入/输出（I/O）接口电路和总线接口等组装在一块主机板（即微机主板）。各种适配（卡）插在主机板的扩展槽上并与电源、软/硬盘驱动器和光驱等装在同一机箱内，再配上系统软件，就构成了一台完整的微型计算机系统。微型计算机硬件组成如图所示。</li></ul><p><img src="/2019/03/09/1-认识和了解51单片机/微型计算机.png" alt="微型计算机" title="微型计算机"></p><h3 id="单板微型计算机"><a href="#单板微型计算机" class="headerlink" title="单板微型计算机"></a>单板微型计算机</h3><ul><li>将CPU芯片、存储器芯片、I/O接口芯片和简单的I/O设备（小键盘、LED显示器）等装配在一块印刷电路板上，再配上监控程序（固化在ROM中），就构成了一台单板微型计算机（简称单板机）。单板微型计算机组成如图所示。主要应用于工业控制器、家用电器等。</li></ul><p><img src="/2019/03/09/1-认识和了解51单片机/单板微型计算机.jpg" alt="单板微型计算机" title="单板微型计算机"></p><h2 id="什么是单片机？"><a href="#什么是单片机？" class="headerlink" title="什么是单片机？"></a>什么是单片机？</h2><ul><li>单片机又称单片微控制器,它不是完成某一个逻辑功能的芯片,而是把一个计算机系统集成到一个芯片上。概括的讲：一块芯片就成了一台计算机。<br>在一片集成电路芯片上集成中央处理器（CPU）、存储器（ROM/RAM）、I/O接口电路，从而构成了单芯片微型计算机，简称单片机。<br><br>常用英文字母的缩写MCU表示单片机（Microcontroller Unit）</li></ul><h3 id="单片机内部结构"><a href="#单片机内部结构" class="headerlink" title="单片机内部结构"></a>单片机内部结构</h3><p>单片机内部结构示意图如图所示，它由微处理器CPU、随机存取存储器RAM、只读存储器ROM、基本输入/输出(I/O)接口电路、定时器/计数器和中断系统等部件组成，并把它们制作在一块大规模集成电路芯片上，就构成一个完整的单片微型计算机。</p><p><img src="/2019/03/09/1-认识和了解51单片机/51单片机内部结构.jpg" alt="51单片机内部结构" title="51单片机内部结构"></p><h3 id="单片机应用系统的组成"><a href="#单片机应用系统的组成" class="headerlink" title="单片机应用系统的组成"></a>单片机应用系统的组成</h3><p>单片机应用系统的组成如图所示。单片机应用系统是以单片机为核心，再加上接口电路及外设等硬件电路和软件，就构成了单片机应用系统。因此，单片机应用系统的设计人员必须从硬件和软件角度来研究单片机，这样才能研究和开发出单片机应用系统和产品。</p><p><img src="/2019/03/09/1-认识和了解51单片机/单片机应用系统的组成.png" alt="单片机应用系统的组成" title="单片机应用系统的组成"></p><h3 id="80C51单片机系列"><a href="#80C51单片机系列" class="headerlink" title="80C51单片机系列"></a>80C51单片机系列</h3><p>虽然目前单片机的品种很多，51系列的典型芯片是80C51（CHMOS型的8051）。为此，众多的厂商都介入了以80C51为代表的8位单片机的发展，如Philips、Siemens（Infineon）、Dallas、ATMEL、STC等公司，我们把这些公司生产的与80C51兼容的单片机统称为80C51系列。</p><p>如：ATMEL公司的AT89S51 AT89S52 AT89S53。</p><p>STC公司的STC89C51 STC89C52 STC89C53</p><h4 id="STC公司的51单片机"><a href="#STC公司的51单片机" class="headerlink" title="STC公司的51单片机"></a>STC公司的51单片机</h4><p><img src="/2019/03/09/1-认识和了解51单片机/STC公司的51单片机.png" alt="STC公司的51单片机" title="STC公司的51单片机"></p><h4 id="STC公司单片机的命名规则"><a href="#STC公司单片机的命名规则" class="headerlink" title="STC公司单片机的命名规则"></a>STC公司单片机的命名规则</h4><p><img src="/2019/03/09/1-认识和了解51单片机/STC公司单片机的命名规则.png" alt="STC公司单片机的命名规则" title="STC公司单片机的命名规则"></p><h2 id="单片机的特点及应用领域"><a href="#单片机的特点及应用领域" class="headerlink" title="单片机的特点及应用领域"></a>单片机的特点及应用领域</h2><h3 id="单片机的特点"><a href="#单片机的特点" class="headerlink" title="单片机的特点"></a>单片机的特点</h3><p>单片机芯片的集成度非常高，它将微型计算机的主要部件都集成在一块芯片上，因此，具有如下特点：</p><ol><li><p>体积小、重量轻、价格低、耗电少、易于产品化。</p></li><li><p>控制性能。</p></li></ol><p>实时控制功能强、运行速度快。因为CPU可以对I/O端口直接进行指令操作，而且位指令操作能力更是其它计算机无法比拟的。</p><ol start="3"><li>可靠性高。<br>由于CPU、存储器及I/O接口集成在同一芯片内，各部件间的连接紧凑，数据在传送时受干扰的影响较小，且不易受环境条件的影响，所以单片机的可靠性非常高。</li></ol><h3 id="单片机的应用领域"><a href="#单片机的应用领域" class="headerlink" title="单片机的应用领域"></a>单片机的应用领域</h3><ol><li><p>家用电器。家用电器是单片机的重要应用领域之一，前景广阔。如微波炉、电视机、电饭煲、空调器、电冰箱、洗衣机等。</p></li><li><p>在交通领域中。如交通灯、汽车、火车、飞机等均有单片机的广泛应用。</p></li><li><p>智能仪器仪表。如各种智能电气测量仪表、智能传感器等。</p></li><li><p>机电一体化产品。如医疗设备（B超）、机人、数控机床、自动包装机、打印机、复印机等。</p></li><li><p>实时工业控制。如温度控制、电机转速控制、生产线控制等。</p></li></ol><h3 id="80C51与STC89C52的区别"><a href="#80C51与STC89C52的区别" class="headerlink" title="80C51与STC89C52的区别"></a>80C51与STC89C52的区别</h3><ul><li><p>Intel公司在1980年推出80C51系列单片机，由于80C51单片机应用早，影响面很大，已经成为工业标准。后来很多著名厂商如Atmel，philps等公司申请了版权，生产了各种与80C51兼容的单片机系列。虽然制造工艺在不断地改进，但内核却没有变化，指令系统完全兼容，而且大多数管脚也兼容。因此，我们称这些与80C51内核相同的单片机为80C51系列单片机或51系列单片机。</p></li><li><p>由于80C51单片机是早期产品，用户无法将自己编写的应用程序烧写到单片机内的存储器，只能将程序交由芯片厂商代为烧写，并且是一次性的。8751单片机的内部存储器有了改进，用户可以将自己编写的程序写入单片机的内部存储器中，但需要用紫外线灯照射25分钟以上再烧写，烧写次数和电压也是有一定限制的。</p></li><li><p>ST89C52单片机是STC公司生产的产品，它把80C51内核与Flash技术相结合，推出可在线编程的单片机。STC89C52单片机指令系统、管脚完全与80C51兼容。</p></li></ul><h2 id="单片机的发展趋势"><a href="#单片机的发展趋势" class="headerlink" title="单片机的发展趋势"></a>单片机的发展趋势</h2><p>20世纪80年代以来，单片机有了新的发展，各半导体器件厂商也纷纷推出自己的产品系列。根据市场的需求要求，未来单片机的发展趋势有如下几个方面：</p><ul><li><p>单片机的字长由4位、8位、16 位发展到32位。</p></li><li><p>目前8位的单片机仍然占主流地位，只有在精度要求特别高的场合如图像处理等，才采用16位或32位的单片机，用户可以根据需要进行字长的选择。</p></li><li><p>运行速度不断提高。</p></li><li><p>单片机的使用最高频率由6MHz、12MHz 、24MHz、33MHz发展到 40MHz和更高，用户可以根据产品的需要进行速度的选择。</p></li></ul><p>如果你觉得有什么不足，欢迎在下方评论区留言</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>51单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】JDK安装配置</title>
    <url>/2019/03/09/JDK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="JDK安装配置"><a href="#JDK安装配置" class="headerlink" title="JDK安装配置"></a>JDK安装配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JDK是 Java 语言的软件开发工具包，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。</p><p><img src="/2019/03/09/JDK安装配置/jdk0.png" alt="Java" title="Java"></p><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>建议安装Java 1.8版本的JDK，这个版本应用广泛，对Android的支持更好！</p><p>附上下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">请点击这里进入Oracle官网下载</a></p><p><img src="/2019/03/09/JDK安装配置/jdk.png" alt="JDK下载" title="JDK 下载"></p><p>选择JDK DOWNLOAD进入下载页面,先勾选<em>Accept License Agreement</em>,再根据自己的操作系统下载JDK</p><p><img src="/2019/03/09/JDK安装配置/jdk_download.png" alt="JDK下载" title="JDK 下载"></p><h2 id="附上JDK-1-8-201下载地址"><a href="#附上JDK-1-8-201下载地址" class="headerlink" title="附上JDK-1.8.201下载地址:"></a>附上JDK-1.8.201下载地址:</h2><p>Windows_64位</p><p><a href="https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-windows-x64.exe?AuthParam=1552128292_9b3014f35886172de934c530961279ab" target="_blank" rel="noopener">JDK-1.8.201_Windows_x64</a></p><p>Windows_32位</p><p><a href="https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-windows-i586.exe?AuthParam=1552128506_7d80458c5fd242a3739865764e9bfda8" target="_blank" rel="noopener">JDK-1.8.201_Windows_xi586</a></p><p><em>其他版本请自行进官网下载</em></p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>下载完成后双击安装，选择安装目录，如果不是固态硬盘（SSD）或者固态硬盘容量小，请选择D盘为解压目录，点击完成，等待安装成功，JDK安装成功后安装程序下一步会提示你安装JRE，需要重新选择路径安装，我这里建议安装到这里可以点击取消安装JRE，因为现在的JDK中已经包含了JRE，不需要另外安装。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li>选中“我的电脑”（或者“此电脑”），右键选中属性，点击高级系统设置</li></ul><p><img src="/2019/03/09/JDK安装配置/env.png" alt="环境变量" title="环境变量"></p><ul><li>再选择环境变量</li></ul><p><img src="/2019/03/09/JDK安装配置/env1.png" alt="环境变量" title="环境变量"></p><ul><li>点击“新建”变量</li></ul><p><img src="/2019/03/09/JDK安装配置/env2.png" alt="环境变量" title="环境变量"></p><ul><li><p>变量名为：JAVA_HOME</p></li><li><p>变量值为：你的JDK所在路径</p></li></ul><p><img src="/2019/03/09/JDK安装配置/env3.png" alt="环境变量" title="环境变量"></p><ul><li>测试一下JRE是否安装成功，WIN+R输入CMD打开命令行，输入java -version，出现以下界面证明JDK安装成功，暂时不要关闭此窗口</li></ul><p><img src="/2019/03/09/JDK安装配置/env4.png" alt="环境变量" title="环境变量"></p><ul><li><p>再进入环境变量配置，新建变量：CLASSPATH，变量值复制以下内容即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2019/03/09/JDK安装配置/env5.png" alt="环境变量" title="环境变量"></p><ul><li>再打开刚刚的命令行窗口，输入javac，出现以下内容即JDK安装配置成功</li></ul><p><img src="/2019/03/09/JDK安装配置/env6.png" alt="环境变量" title="环境变量"></p><p>JDK的安装配置就到这里，如果你觉得有什么不足，欢迎在下方评论区留言</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>【Android】Android Studio 安装配置简介</title>
    <url>/2019/03/09/Android-Studio-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="Android-Studio-安装配置简介"><a href="#Android-Studio-安装配置简介" class="headerlink" title="Android Studio 安装配置简介"></a>Android Studio 安装配置简介</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>Android Studio 是谷歌推出的一个Android集成开发工具，基于IntelliJ IDEA. 类似 Eclipse ADT，Android Studio 提供了集成的 Android 开发工具用于开发和调试。</p><p><img src="/2019/03/09/Android-Studio-安装配置简介/android.jpg" alt="Android" title="Android"></p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK:"></a>安装JDK:</h3><p>安装JDK就不在这里详细赘述了，请查看我的另一篇博文<a href="https://fishercloud.github.io/2019/03/09/JDK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/#more">《JDK安装配置》</a></p><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h3><p>安装Android Studio有两种方法</p><h4 id="方法一：直接下载Android-Studio安装"><a href="#方法一：直接下载Android-Studio安装" class="headerlink" title="方法一：直接下载Android Studio安装"></a>方法一：直接下载Android Studio安装</h4><p>附上下载链接，请使用浏览器打开链接进行下载，不要用迅雷下载、不要用迅雷下载、不要用迅雷下载，重要的事情说三遍</p><p>Windows 64位<a href="https://dl.google.com/dl/android/studio/install/3.3.2.0/android-studio-ide-182.5314842-windows.exe?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener">点击下载</a></p><p>Windows 32位<a href="https://dl.google.com/dl/android/studio/ide-zips/3.3.2.0/android-studio-ide-182.5314842-windows32.zip?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener">点击下载</a></p><p>安装过程不做详细赘述，注意安装路径即可</p><h4 id="方法二：使用Jetbrains公司的ToolBox下载"><a href="#方法二：使用Jetbrains公司的ToolBox下载" class="headerlink" title="方法二：使用Jetbrains公司的ToolBox下载"></a>方法二：使用Jetbrains公司的ToolBox下载</h4><p><img src="/2019/03/09/Android-Studio-安装配置简介/toolbox.png" alt="&quot;ToolBox&quot;" title="ToolBox"></p><p>选择版本下载，我们这里选择Windows版本下载，其他系统请下载相应安装包</p><p>附上Windows版本下载链接<a href="https://download.jetbrains.8686c.com/toolbox/jetbrains-toolbox-1.13.4801.exe" target="_blank" rel="noopener">点击下载</a></p><p>下载完成后，安装即可，安装完成后打开ToolBox，ToolBox界面如下，我已经安装过了</p><p><img src="/2019/03/09/Android-Studio-安装配置简介/toolbox1.png" alt="&quot;ToolBox&quot;" title="ToolBox"></p><p>先不要安装，点击右上角设置，更改开发工具的安装路径，建议安装在D盘，然后返回上一级安装即可</p><p><img src="/2019/03/09/Android-Studio-安装配置简介/toolbox2.png" alt="&quot;ToolBox&quot;" title="ToolBox"></p><h3 id="配置SDK"><a href="#配置SDK" class="headerlink" title="配置SDK"></a>配置SDK</h3><p>附上SDK tool下载链接<a href="https://dl.google.com/android/repository/sdk-tools-windows-3859397.zip?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener">点击下载</a></p><p>下载完成后解压缩到D盘，D://Android/SDK/你的SDK根目录</p><p>然后打开Android Studio</p><p><img src="/2019/03/09/Android-Studio-安装配置简介/androidstudio.png" alt="Android Studio" title="Android Studio"></p><p>第一次进入会进行各种设置，最重要的是选择Android SDK的系统环境，进入Android studio后新建一个工程选择空白的Android工程，选择Android版本，创建成功之后，IDE会自动下载相关依赖和环境，等待下载完成即可</p><p>未完待续~</p><p>详细介绍后续补齐</p><p>如果你觉得有什么不足，欢迎在下方评论区留言</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux期末复习</title>
    <url>/2019/03/08/Linux%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<!-- build time:Tue Feb 25 2020 20:59:01 GMT+0800 (GMT+08:00) --><h1 id="Linux期末复习资料🐧"><a href="#Linux期末复习资料🐧" class="headerlink" title="Linux期末复习资料🐧"></a>Linux期末复习资料🐧</h1><p><em>作者：鱼摆摆 2019-01-08 update for 2019-03-8</em></p><p><em>适用于<a href="http://cs.sicnu.edu.cn/" target="_blank" rel="noopener">四川师范大学计算机科学学院</a>Linux高级程序设计课程</em></p><p><em>教师：张莹</em></p><p><img src="/2019/03/08/Linux期末复习/linux.png" alt="Linux 复习纲要" title="Linux 复习纲要"></p><hr><h2 id="一、选择题（Linux命令）-20’"><a href="#一、选择题（Linux命令）-20’" class="headerlink" title="一、选择题（Linux命令） 20’"></a><em>一、选择题（Linux命令） 20’</em></h2><ul><li><p><strong><em>who</em>: 显示所有正在使用系统的用户、所用终端名、注册到系统的时间</strong></p><ul><li>-H 或 –heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 –idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过24小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或–count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</li></ul></li><li><p><strong><em>echo</em>: 输出命令，后面接输出内容，引号可加可不加</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;OK! \n&quot; # -e 开启转义</span><br></pre></td></tr></table></figure></li><li><p><strong><em>date</em>: 用来显示或设定系统的日期与时间</strong></p><ul><li>-u : 显示目前的格林威治时间</li></ul></li><li><p><strong><em>pwd</em>: 显示当前路径</strong></p></li><li><p><strong><em>ls</em>: 显示文件、目录信息</strong></p><ul><li>-l: 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出<br>@import “ls-l.png”</li><li>-a: 显示所有文件及目录 (ls内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出)</li><li>-r: 将文件以相反次序显示(原定依英文字母次序)</li><li>-t: 将文件依建立时间之先后次序列出</li><li>-A: 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录)</li><li>-R: 若目录下有文件，则以下之文件亦皆依序列出</li></ul></li><li><p><strong>cat: 用于连接文件并打印到标准输出设备上</strong></p><ul><li>-n 或 –number：由 1 开始对所有输出的行数编号。</li><li>-b 或 –number-nonblank：和 -n 相似，只不过对于空白行不编号。</li><li>-s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。</li><li>-v 或 –show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。</li><li>-E 或 –show-ends : 在每行结束处显示 $。</li><li>-T 或 –show-tabs: 将 TAB 字符显示为 ^I。</li><li>-A, –show-all：等价于 -vET。</li></ul></li><li><p><strong>rm: 用于删除一个文件或者目录</strong></p><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul></li><li><p><strong>cp: 用于复制文件或目录</strong></p><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul></li><li><p><strong>touch: 用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</strong></p><ul><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li></ul></li><li><p><strong>cd: 用于切换当前工作目录至 dirName(目录参数)</strong></p><ul><li><p>跳到 /usr/bin/ :</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/bin</span><br></pre></td></tr></table></figure></li><li><p>跳到自己的 home 目录 :</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure></li><li><p>跳到目前目录的上一层 :</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>mkdir: 用于建立名称为 dirName 之子目录</strong></p><ul><li>-p 确保目录名称存在，不存在的就建一个。</li></ul></li><li><p><strong>rmdir: 删除空目录</strong></p><ul><li>-p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。</li></ul></li><li><p><strong>wc: 用于计算字数</strong></p><ul><li>-c或–bytes或–chars 只显示Bytes数。</li><li>-l或–lines 只显示行数。</li><li>-w或–words 只显示字数。</li></ul></li><li><p><strong>time: time命令的用途，在于量测特定指令执行时所需消耗的时间及系统资源等资讯</strong></p><ul><li>-o 或 –output=FILE：设定结果输出档。这个选项会将 time 的输出写入 所指定的档案中。如果档案已经存在，系统将覆写其内容。</li><li>-a 或 –append：配合 -o 使用，会将结果写到档案的末端，而不会覆盖掉原来的内容。</li><li>-f FORMAT 或 –format=FORMAT：以 FORMAT 字串设定显示方式。当这个选项没有被设定的时候，会用系统预设的格式。不过你可以用环境变数 time 来设定这个格式，如此一来就不必每次登入系统都要设定一次。</li></ul></li><li><p><strong>chmod: 改变文件操作权限</strong></p><ul><li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li><li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。<br><em>其他参数说明：</em></li><li>-c : 若该文件权限确实已经更改，才显示其更改动作</li><li>-f : 若该文件权限无法被更改也不要显示错误讯息</li><li>-v : 显示权限变更的详细资料</li><li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li></ul></li><li><p><strong>chown: 将指定文件的拥有者改为指定的用户或组</strong></p><ul><li>-c : 显示更改的部分的信息</li><li>-f : 忽略错误信息</li><li>-h :修复符号链接</li><li>-v : 显示详细的处理信息</li><li>-R : 处理指定目录以及其子目录下的所有文件</li></ul></li><li><p><strong>tar: 用于压缩（备份）文件</strong></p><ul><li>-A或–catenate 新增文件到已存在的备份文件。</li><li>-b&lt;区块数目&gt;或–blocking-factor=&lt;区块数目&gt; 设置每笔记录的区块数目，每个区块大小为12Bytes。</li><li>-B或–read-full-records 读取数据时重设区块大小。</li><li>-c或–create 建立新的备份文件。</li><li>-C&lt;目的目录&gt;或–directory=&lt;目的目录&gt; 切换到指定的目录。</li><li>-d或–diff或–compare 对比备份文件内和文件系统上的文件的差异。</li><li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt; 指定备份文件。</li><li>-F&lt;Script文件&gt;或–info-script=&lt;Script文件&gt; 每次更换磁带时，就执行指定的Script文件。</li><li>-g或–listed-incremental 处理GNU格式的大量备份。</li><li>-G或–incremental 处理旧的GNU格式的大量备份。</li><li>-h或–dereference 不建立符号连接，直接复制该连接所指向的原始文件。</li><li>-i或–ignore-zeros 忽略备份文件中的0 Byte区块，也就是EOF。</li><li>-k或–keep-old-files 解开备份文件时，不覆盖已有的文件。</li><li>-K&lt;文件&gt;或–starting-file=&lt;文件&gt; 从指定的文件开始还原。</li><li>-l或–one-file-system 复制的文件或目录存放的文件系统，必须与tar指令执行时所处的文件系统相同，否则不予复制。</li><li>-L&lt;媒体容量&gt;或-tape-length=&lt;媒体容量&gt; 设置存放每体的容量，单位以1024 Bytes计算。</li><li>-m或–modification-time 还原文件时，不变更文件的更改时间。</li><li>-M或–multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。</li><li>-N&lt;日期格式&gt;或–newer=&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里。</li><li>-o或–old-archive或–portability 将资料写入备份文件时使用V7格式。</li><li>-O或–stdout 把从备份文件里还原的文件输出到标准输出设备。</li><li>-p或–same-permissions 用原来的文件权限还原文件。</li><li>-P或–absolute-names 文件名使用绝对名称，不移除文件名称前的”/“号。</li><li>-r或–append 新增文件到已存在的备份文件的结尾部分。</li><li>-R或–block-number 列出每个信息在备份文件中的区块编号。</li><li>-s或–same-order 还原文件的顺序和备份文件内的存放顺序相同。</li><li>-S或–sparse 倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。</li><li>-t或–list 列出备份文件的内容。</li><li>-T&lt;范本文件&gt;或–files-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让tar解开或建立符合设置条件的文件。</li><li>-u或–update 仅置换较备份文件内的文件更新的文件。</li><li>-U或–unlink-first 解开压缩文件还原文件之前，先解除文件的连接。</li><li>-v或–verbose 显示指令执行过程。</li><li>-V&lt;卷册名称&gt;或–label=&lt;卷册名称&gt; 建立使用指定的卷册名称的备份文件。</li><li>-w或–interactive 遭遇问题时先询问用户。</li><li>-W或–verify 写入备份文件后，确认文件正确无误。</li><li>-x或–extract或–get 从备份文件中还原文件。</li><li>-X&lt;范本文件&gt;或–exclude-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让ar排除符合设置条件的文件。</li><li>-z或–gzip或–ungzip 通过gzip指令处理备份文件。</li><li>-Z或–compress或–uncompress 通过compress指令处理备份文件。<br><strong>实例</strong></li><li><p>压缩文件 非打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># touch a.c       </span><br><span class="line"># tar -zcvf test.tar.gz a.c   //压缩 a.c文件为test.tar.gz</span><br><span class="line">a.c</span><br></pre></td></tr></table></figure></li><li><p>解压文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -zxvf test.tar.gz </span><br><span class="line">a.c</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>passwd: 用来更改使用者的密码</strong></p><ul><li>-d 删除密码</li><li>-f 强制执行</li><li>-k 更新只能发送在过期之后</li><li>-l 停止账号使用</li><li>-S 显示密码信息</li><li>-u 启用已被停止的账户</li><li>-x 设置密码的有效期</li><li>-g 修改群组密码</li><li>-i 过期后停止用户账号</li></ul></li><li><p><strong>uesradd: 用于建立用户帐号</strong></p><ul><li>-c&lt;备注&gt; 　加上备注文字。备注文字会保存在passwd的备注栏位中。</li><li>-d&lt;登入目录&gt; 　指定用户登入时的启始目录。</li><li>-D 　变更预设值．</li><li>-e&lt;有效期限&gt; 　指定帐号的有效期限。</li><li>-f&lt;缓冲天数&gt; 　指定在密码过期后多少天即关闭该帐号。</li><li>-g&lt;群组&gt; 　指定用户所属的群组。</li><li>-G&lt;群组&gt; 　指定用户所属的附加群组。</li><li>-m 　自动建立用户的登入目录。</li><li>-M 　不要自动建立用户的登入目录。</li><li>-n 　取消建立以用户名称为名的群组．</li><li>-r 　建立系统帐号。</li><li>-s\<shell>指定用户登入后所使用的shell。</shell></li><li><p>-u\<uid>指定用户ID。</uid></p><p><strong>实例</strong></p></li><li><p>添加一般用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd tt</span><br></pre></td></tr></table></figure></li><li><p>为添加的用户指定相应的用户组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd -g root tt</span><br></pre></td></tr></table></figure></li><li><p>创建一个系统用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd -r tt</span><br></pre></td></tr></table></figure></li><li><p>为新添加的用户指定home目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd -d /home/myd tt</span><br></pre></td></tr></table></figure></li><li><p>建立用户且制定ID</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd caojh -u 544</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>userdel: 用于删除用户帐号</strong></p><ul><li><p>-r 　删除用户登入目录以及目录中所有文件。</p><p><strong>实例</strong></p></li><li>删除用户账号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># userdel hnlinux</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>grep: 用于查找文件里符合条件的字符串</strong></p><ul><li>-a 或 –text : 不要忽略二进制的数据。</li><li>-A&lt;显示行数&gt; 或 –after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li><li>-b 或 –byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</li><li>-B&lt;显示行数&gt; 或 –before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li><li>-c 或 –count : 计算符合样式的列数。</li><li>-C&lt;显示行数&gt; 或 –context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li><li>-d &lt;动作&gt; 或 –directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li><li>-e&lt;范本样式&gt; 或 –regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。</li><li>-E 或 –extended-regexp : 将样式为延伸的普通表示法来使用。</li><li>-f&lt;规则文件&gt; 或 –file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</li><li>-F 或 –fixed-regexp : 将样式视为固定字符串的列表。</li><li>-G 或 –basic-regexp : 将样式视为普通的表示法来使用。</li><li>-h 或 –no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</li><li>-H 或 –with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。</li><li>-i 或 –ignore-case : 忽略字符大小写的差别。</li><li>-l 或 –file-with-matches : 列出文件内容符合指定的样式的文件名称。</li><li>-L 或 –files-without-match : 列出文件内容不符合指定的样式的文件名称。</li><li>-n 或 –line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。</li><li>-o 或 –only-matching : 只显示匹配PATTERN 部分。</li><li>-q 或 –quiet或–silent : 不显示任何信息。</li><li>-r 或 –recursive : 此参数的效果和指定”-d recurse”参数相同。</li><li>-s 或 –no-messages : 不显示错误信息。</li><li>-v 或 –revert-match : 显示不包含匹配文本的所有行。</li><li>-V 或 –version : 显示版本信息。</li><li>-w 或 –word-regexp : 只显示全字符合的列。</li><li>-x –line-regexp : 只显示全列符合的列。</li><li><p>-y : 此参数的效果和指定”-i”参数相同。</p><p><strong>实例</strong></p></li><li><p>1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep test *file</span><br></pre></td></tr></table></figure></li><li><p>2、以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容，使用的命令为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -r update /etc/acpi</span><br></pre></td></tr></table></figure></li><li><p>3、反向查找。前面各个例子是查找并打印出符合条件的行，通过”-v”参数可以打印出不符合条件行的内容。<br>查找文件名中包含 test 的文件中不包含test 的行，此时，使用的命令为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -v test *test*</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>ps: 用于显示当前进程 (process) 的状态</strong></p><ul><li>-A 列出所有的行程</li><li>-w 显示加宽可以显示较多的资讯</li><li>-au 显示较详细的资讯</li><li>-aux 显示所有包含其他使用者的行程</li><li>au(x) 输出格式 :<ul><li>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</li><li>USER: 行程拥有者</li><li>PID: pid</li><li>%CPU: 占用的 CPU 使用率</li><li>%MEM: 占用的记忆体使用率</li><li>VSZ: 占用的虚拟记忆体大小</li><li>RSS: 占用的记忆体大小</li><li>TTY: 终端的次要装置号码 (minor device number of tty)</li><li>STAT: 该行程的状态:</li><li>D: 不可中断的静止 (通悸□□缜b进行 I/O 动作)</li><li>R: 正在执行中</li><li>S: 静止状态</li><li>T: 暂停执行</li><li>Z: 不存在但暂时无法消除</li><li>W: 没有足够的记忆体分页可分配</li><li>&lt;: 高优先序的行程</li><li>N: 低优先序的行程</li><li>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)</li><li>START: 行程开始时间</li><li>TIME: 执行的时间</li><li>COMMAND:所执行的指令</li></ul></li></ul></li><li><p><strong>kill: 用于删除执行中的程序或工作、也可将指定的信号送至程序</strong></p><ul><li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称。</li><li>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</li><li><p>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</p><p><strong>实例</strong></p></li><li><p>杀死进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kill 12345</span><br></pre></td></tr></table></figure></li><li><p>强制杀死进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kill -KILL 123456</span><br></pre></td></tr></table></figure></li><li><p>发送SIGHUP信号，可以使用一下信号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kill -HUP pid</span><br></pre></td></tr></table></figure></li><li><p>彻底杀死进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kill -9 123456</span><br></pre></td></tr></table></figure></li><li><p>显示信号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kill -l</span><br><span class="line">1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line">6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL      10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure></li><li><p>杀死指定用户所有进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#kill -9 $(ps -ef | grep hnlinux) //方法一 过滤出hnlinux用户进程 </span><br><span class="line">#kill -u hnlinux //方法二</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>mount: 用于挂载Linux系统外的文件</strong></p><ul><li>-V：显示程序版本</li><li>-h：显示辅助讯息</li><li>-v：显示较讯息，通常和 -f 用来除错。</li><li>-a：将 /etc/fstab 中定义的所有档案系统挂上。</li><li>-F：这个命令通常和 -a 一起使用，它会为每一个 mount 的动作产生一个行程负责执行。在系统需要挂上大量 NFS 档案系统时可以加快挂上的动作。</li><li>-f：通常用在除错的用途。它会使 mount 并不执行实际挂上的动作，而是模拟整个挂上的过程。通常会和 -v 一起使用。</li><li>-n：一般而言，mount 在挂上后会在 /etc/mtab 中写入一笔资料。但在系统中没有可写入档案系统存在的情况下可以用这个选项取消这个动作。</li><li>-s-r：等于 -o ro</li><li>-w：等于 -o rw</li><li>-L：将含有特定标签的硬盘分割挂上。</li><li>-U：将档案分割序号为 的档案系统挂下。-L 和 -U 必须在/proc/partition 这种档案存在时才有意义。</li><li>-t：指定档案系统的型态，通常不必指定。mount 会自动选择正确的型态。</li><li>-o async：打开非同步模式，所有的档案读写动作都会用非同步模式执行。</li><li>-o sync：在同步模式下执行。</li><li>-o atime、-o noatime：当 atime 打开时，系统会在每次读取档案时更新档案的『上一次调用时间』。当我们使用 flash 档案系统时可能会选项把这个选项关闭以减少写入的次数。</li><li>-o auto、-o noauto：打开/关闭自动挂上模式。</li><li>-o defaults:使用预设的选项 rw, suid, dev, exec, auto, nouser, and async.</li><li>-o dev、-o nodev-o exec、-o noexec允许执行档被执行。</li><li>-o suid、-o nosuid：<br>允许执行档在 root 权限下执行。</li><li>-o user、-o nouser：使用者可以执行 mount/umount 的动作。</li><li>-o remount：将一个已经挂下的档案系统重新用不同的方式挂上。例如原先是唯读的系统，现在用可读写的模式重新挂上。</li><li>-o ro：用唯读模式挂上。</li><li>-o rw：用可读写模式挂上。</li><li><p>-o loop=：使用 loop 模式用来将一个档案当成硬盘分割挂上系统。</p><p><strong>实例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -t iso9660 /dev/cdrom/mnt/cdrom</span><br><span class="line">mount -t nfs 127.0.0.1:/mnt/nfs/mnt/nfs</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>umount: 用于卸除文件系统</strong></p><ul><li>-a 卸除/etc/mtab中记录的所有文件系统。</li><li>-h 显示帮助。</li><li>-n 卸除时不要将信息存入/etc/mtab文件中。</li><li>-r 若无法成功卸除，则尝试以只读的方式重新挂入文件系统。</li><li>-t&lt;文件系统类型&gt; 仅卸除选项中所指定的文件系统。</li><li>-v 执行时显示详细的信息。</li><li>-V 显示版本信息。</li><li><p>[文件系统] 除了直接指定文件系统外，也可以用设备名称或挂入点来表示文件系统。</p><p><strong>实例</strong></p></li><li>下面两条命令分别通过设备名和挂载点卸载文件系统，同时输出详细信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># umount -v /dev/sda1          通过设备名卸载  </span><br><span class="line">/dev/sda1 umounted  </span><br><span class="line"># umount -v /mnt/mymount/      通过挂载点卸载  </span><br><span class="line">/tmp/diskboot.img umounted</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>vi: 文本编辑器</strong><br><img src="/2019/03/08/Linux期末复习/vi.gif" alt="&quot;vi 编辑器&quot;" title="vi 编辑器"></p></li></ul><hr><h2 id="二、GDB填空题-20’"><a href="#二、GDB填空题-20’" class="headerlink" title="二、GDB填空题  20’"></a><em>二、GDB填空题 20’</em></h2><p><strong>gcc编译</strong><br>-</p><ul><li>GCC编译过程：</li><li>-预处理</li><li>-编译</li><li>-汇编</li><li>-链接</li><li><p>基本语法格式：⚠️⚠️⚠️</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gcc -c 源文件名.c</span><br><span class="line"># gcc -o 生成的可执行文件名（可任意，通常为源文件名去掉后缀）源文件名.o</span><br></pre></td></tr></table></figure></li><li><p>静态库的创建和使用：<span class="emoji" style="background-image:url(https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8">&#x26a0;</span></p></li><li>1、编写源文件libhello.h linhello.c</li><li><p>2、生成目标文件libhello.o</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -c libhello.c -o libhello.o</span><br></pre></td></tr></table></figure></li><li><p>3、使用ar命令创建静态库libhello.a</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ar -rc libhello.a libhello.o</span><br><span class="line">file lib hello.a</span><br></pre></td></tr></table></figure></li><li><p>4、静态库的使用：<br>编辑测试文件usehello.c，生成可执行文件usehello_static</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc –o usehello_static usehello.c libhello.a</span><br></pre></td></tr></table></figure></li><li><p>动态库的创建和使用：⚠️</p></li><li>1、编写源文件libhello.h linhello.c</li><li><p>2、生成共享库目标文件libhello.o</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -Wall -g -c libhello.c -o libhello.o</span><br></pre></td></tr></table></figure></li><li><p>3、编译共享库libhello.so.1.0</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -g -shared -W1,-soname,libhello.so -o libhello.so.1.0 libhello.o</span><br><span class="line">file lib hello.so.1.0</span><br></pre></td></tr></table></figure></li><li><p>4、创建共享库的符号链接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln –s libhello.so.1.0 libhello.so</span><br></pre></td></tr></table></figure></li><li><p>5、动态库的使用：<br>编辑测试文件usehello.c，生成可执行文件usehello_dy</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc –g –o usehello_dy usehello.c –lhello –L ./</span><br><span class="line">LD_LIBRARY_PATH=$(pwd)  ./usehello_dy</span><br></pre></td></tr></table></figure></li></ul><p><strong>gdb调试器</strong><br>-</p><ul><li><p>gdb调试必须加上参数 -g</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gcc -g text.c -o text</span><br></pre></td></tr></table></figure></li><li><p>调试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gdb filename</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数列表</strong><br>-</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:center">命令缩写</th><th style="text-align:left">命令说明</th></tr></thead><tbody><tr><td style="text-align:left">list</td><td style="text-align:center">l</td><td style="text-align:left">显示多行源代码</td></tr><tr><td style="text-align:left">break</td><td style="text-align:center">b</td><td style="text-align:left">设置断点,程序运行到断点的位置会停下来</td></tr><tr><td style="text-align:left">info</td><td style="text-align:center">i</td><td style="text-align:left">描述程序的状态</td></tr><tr><td style="text-align:left">run</td><td style="text-align:center">r</td><td style="text-align:left">开始运行程序</td></tr><tr><td style="text-align:left">display</td><td style="text-align:center">disp</td><td style="text-align:left">跟踪查看某个变量,每次停下来都显示它的值</td></tr><tr><td style="text-align:left">step</td><td style="text-align:center">s</td><td style="text-align:left">执行下一条语句,如果该语句为函数调用,则进入函数执行其中的第一条语句</td></tr><tr><td style="text-align:left">next</td><td style="text-align:center">n</td><td style="text-align:left">执行下一条语句,如果该语句为函数调用,不会进入函数内部执行(即不会一步步地调试函数内部语句)</td></tr><tr><td style="text-align:left">print</td><td style="text-align:center">p</td><td style="text-align:left">打印内部变量值</td></tr><tr><td style="text-align:left">continue</td><td style="text-align:center">c</td><td style="text-align:left">继续程序的运行,直到遇到下一个断点</td></tr><tr><td style="text-align:left">set var name=v</td><td style="text-align:center"></td><td style="text-align:left">设置变量的值</td></tr><tr><td style="text-align:left">start</td><td style="text-align:center">st</td><td style="text-align:left">开始执行程序,在main函数的第一条语句前面停下来</td></tr><tr><td style="text-align:left">file</td><td style="text-align:center"></td><td style="text-align:left">装入需要调试的程序</td></tr><tr><td style="text-align:left">kill</td><td style="text-align:center">k</td><td style="text-align:left">终止正在调试的程序</td></tr><tr><td style="text-align:left">watch</td><td style="text-align:center"></td><td style="text-align:left">监视变量值的变化</td></tr><tr><td style="text-align:left">backtrace</td><td style="text-align:center">bt</td><td style="text-align:left">产看函数调用信息(堆栈)</td></tr><tr><td style="text-align:left">frame</td><td style="text-align:center">f</td><td style="text-align:left">查看栈帧</td></tr><tr><td style="text-align:left">quit</td><td style="text-align:center">q</td><td style="text-align:left">退出GDB环境</td></tr></tbody></table><p><br></p><hr><h2 id="三、shell编程（上机测试-function-cdManager）-10’"><a href="#三、shell编程（上机测试-function-cdManager）-10’" class="headerlink" title="三、shell编程（上机测试 +-\/ function cdManager） 10’*"></a><em>三、shell编程（上机测试 +-\</em>/ function cdManager） 10’*</h2><ul><li><p>运行 Shell 脚本有两种方法：</p><ul><li><p>1、作为可执行程序</p><p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p></li><li><p>2、作为解释器参数</p><p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>系统预定义变量</strong></p><table><thead><tr><th style="text-align:center">参数处理</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">$#</td><td style="text-align:left">传递到脚本的参数个数</td></tr><tr><td style="text-align:center">$*</td><td style="text-align:left">以一个单字符串显示所有向脚本传递的参数。<br>如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td style="text-align:center">$$</td><td style="text-align:left">脚本运行的当前进程ID号</td></tr><tr><td style="text-align:center">$!</td><td style="text-align:left">后台运行的最后一个进程的ID号</td></tr><tr><td style="text-align:center">$@</td><td style="text-align:left">与$*相同，但是使用时加引号，并在引号中返回每个参数。<br>如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td style="text-align:center">$-</td><td style="text-align:left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td style="text-align:center">$?</td><td style="text-align:left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><p><br></p><p><strong>算术运算符</strong></p><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:left">加法</td><td style="text-align:left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td style="text-align:center">-</td><td style="text-align:left">减法</td><td style="text-align:left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">乘法</td><td style="text-align:left"><code>expr $a \* $b</code> 结果为 200。</td></tr><tr><td style="text-align:center">/</td><td style="text-align:left">除法</td><td style="text-align:left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td style="text-align:center">%</td><td style="text-align:left">取余</td><td style="text-align:left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td style="text-align:center">=</td><td style="text-align:left">赋值</td><td style="text-align:left">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td style="text-align:center">==</td><td style="text-align:left">相等。用于比较两个数字，相同则返回 true。</td><td style="text-align:left">[ $a == $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:left">不相等。用于比较两个数字，不相同则返回 true。</td><td style="text-align:left">[ $a != $b ] 返回 true。</td></tr></tbody></table><p>注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。</p><p>算术运算符实例如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo &quot;a + b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a - $b`</span><br><span class="line">echo &quot;a - b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a \* $b`</span><br><span class="line">echo &quot;a * b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $b / $a`</span><br><span class="line">echo &quot;b / a : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $b % $a`</span><br><span class="line">echo &quot;b % a : $val&quot;</span><br><span class="line"></span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;a 不等于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>执行脚本，输出结果如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a + b : 30</span><br><span class="line">a - b : -10</span><br><span class="line">a * b : 200</span><br><span class="line">b / a : 2</span><br><span class="line">b % a : 0</span><br><span class="line">a 不等于 b</span><br></pre></td></tr></table></figure><p></p><p>注意：⚠️</p><ul><li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li><li>if…then…fi 是条件语句，后续将会讲解。</li><li>在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 “*” 不需要转义符号 “\” 。</li></ul><p><strong>关系运算符</strong></p><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字<br><br>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:left">检测两个数是否相等，相等返回 true。</td><td style="text-align:left">[ $a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:left">检测两个数是否不相等，不相等返回 true。</td><td style="text-align:left">[ $a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><p>关系运算符实例如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a -eq $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a -eq $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -ne $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a -ne $b: a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a -ne $b : a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a -gt $b: a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a -gt $b: a 不大于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a -lt $b: a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a -lt $b: a 不小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -ge $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a -ge $b: a 大于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a -ge $b: a 小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -le $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a -le $b: a 小于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a -le $b: a 大于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>执行脚本，输出结果如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 -eq 20: a 不等于 b</span><br><span class="line">10 -ne 20: a 不等于 b</span><br><span class="line">10 -gt 20: a 不大于 b</span><br><span class="line">10 -lt 20: a 小于 b</span><br><span class="line">10 -ge 20: a 小于 b</span><br><span class="line">10 -le 20: a 小于或等于 b</span><br></pre></td></tr></table></figure><p></p><p><strong>布尔运算符</strong></p><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td style="text-align:left">[ ! false ] 返回 true。</td></tr><tr><td style="text-align:center">-o</td><td style="text-align:left">或运算，有一个表达式为 true 则返回 true。</td><td style="text-align:left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:left">与运算，两个表达式都为 true 才返回 true。</td><td style="text-align:left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><p>布尔运算符实例如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a != $b : a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a != $b: a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt 100 -a $b -gt 15 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a 小于 100 且 $b 大于 15 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a 小于 100 且 $b 大于 15 : 返回 false&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt 100 -o $b -gt 100 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a 小于 100 或 $b 大于 100 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a 小于 100 或 $b 大于 100 : 返回 false&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt 5 -o $b -gt 100 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a 小于 5 或 $b 大于 100 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a 小于 5 或 $b 大于 100 : 返回 false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>执行脚本，输出结果如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 != 20 : a 不等于 b</span><br><span class="line">10 小于 100 且 20 大于 15 : 返回 true</span><br><span class="line">10 小于 100 或 20 大于 100 : 返回 true</span><br><span class="line">10 小于 5 或 20 大于 100 : 返回 false</span><br></pre></td></tr></table></figure><p></p><p><strong>逻辑运算符</strong></p><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:left">逻辑的 AND</td><td style="text-align:left">[ $a -lt 100 &amp;&amp; $b -gt 100 ] 返回 false</td></tr><tr><td style="text-align:center">&#124;&#124;</td><td style="text-align:left">逻辑的 OR</td><td style="text-align:left">[ $a -lt 100 &#124;&#124; $b -gt 100 ] 返回 true</td></tr></tbody></table><p>逻辑运算符实例如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</span><br><span class="line">then</span><br><span class="line">    echo &quot;返回 true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;返回 false&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 || $b -gt 100 ]]</span><br><span class="line">then</span><br><span class="line">    echo &quot;返回 true&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;返回 false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>执行脚本，输出结果如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回 false</span><br><span class="line">返回 true</span><br></pre></td></tr></table></figure><p></p><p><strong>字符串运算符</strong></p><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th style="text-align:center">运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td>检测两个字符串是否相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td style="text-align:center">-n</td><td>检测字符串长度是否为0，不为0返回 true。</td><td>[ -n “$a” ] 返回 true。</td></tr><tr><td style="text-align:center">str</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><p>字符串运算符实例如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">a=&quot;abc&quot;</span><br><span class="line">b=&quot;efg&quot;</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a = $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a = $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a != $b : a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a != $b: a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -z $a ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;-z $a : 字符串长度为 0&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;-z $a : 字符串长度不为 0&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -n &quot;$a&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;-n $a : 字符串长度不为 0&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;-n $a : 字符串长度为 0&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$a : 字符串不为空&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;$a : 字符串为空&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>执行脚本，输出结果如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc = efg: a 不等于 b</span><br><span class="line">abc != efg : a 不等于 b</span><br><span class="line">-z abc : 字符串长度不为 0</span><br><span class="line">-n abc : 字符串长度不为 0</span><br><span class="line">abc : 字符串不为空</span><br></pre></td></tr></table></figure><p></p><p><strong>文件测试运算符</strong></p><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">-b file</td><td style="text-align:left">检测文件是否是块设备文件，如果是，则返回 true。</td><td style="text-align:left">[ -b $file ] 返回 false。</td></tr><tr><td style="text-align:center">-c file</td><td style="text-align:left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td style="text-align:left">[ -c $file ] 返回 false。</td></tr><tr><td style="text-align:center">-d file</td><td style="text-align:left">检测文件是否是目录，如果是，则返回 true。</td><td style="text-align:left">[ -d $file ] 返回 false。</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td style="text-align:left">[ -f $file ] 返回 true。</td></tr><tr><td style="text-align:center">-g file</td><td style="text-align:left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td style="text-align:left">[ -g $file ] 返回 false。</td></tr><tr><td style="text-align:center">-k file</td><td style="text-align:left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td style="text-align:left">[ -k $file ] 返回 false。</td></tr><tr><td style="text-align:center">-p file</td><td style="text-align:left">检测文件是否是有名管道，如果是，则返回 true。</td><td style="text-align:left">[ -p $file ] 返回 false。</td></tr><tr><td style="text-align:center">-u file</td><td style="text-align:left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td style="text-align:left">[ -u $file ] 返回 false。</td></tr><tr><td style="text-align:center">-r file</td><td style="text-align:left">检测文件是否可读，如果是，则返回 true。</td><td style="text-align:left">[ -r $file ] 返回 true。</td></tr><tr><td style="text-align:center">-w file</td><td style="text-align:left">检测文件是否可写，如果是，则返回 true。</td><td style="text-align:left">[ -w $file ] 返回 true。</td></tr><tr><td style="text-align:center">-x file</td><td style="text-align:left">检测文件是否可执行，如果是，则返回 true。</td><td style="text-align:left">[ -x $file ] 返回 true。</td></tr><tr><td style="text-align:center">-s file</td><td style="text-align:left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td style="text-align:left">[ -s $file ] 返回 true。</td></tr><tr><td style="text-align:center">-e file</td><td style="text-align:left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td style="text-align:left">[ -e $file ] 返回 true。</td></tr></tbody></table><p>变量 file 表示文件”/var/www/runoob/test.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">file=&quot;/var/www/runoob/test.sh&quot;</span><br><span class="line">if [ -r $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件可读&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不可读&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -w $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件可写&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不可写&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -x $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件可执行&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不可执行&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -f $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件为普通文件&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件为特殊文件&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -d $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件是个目录&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不是个目录&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -s $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件不为空&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件为空&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -e $file ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>执行脚本，输出结果如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件可读</span><br><span class="line">文件可写</span><br><span class="line">文件可执行</span><br><span class="line">文件为普通文件</span><br><span class="line">文件不是个目录</span><br><span class="line">文件不为空</span><br><span class="line">文件存在</span><br></pre></td></tr></table></figure><p></p><p><strong>Shell 流程控制</strong></p><p><strong>if else</strong></p><p><strong>if</strong></p><p>if 语句语法格式：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>写成一行（适用于终端命令提示符）：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi</span><br></pre></td></tr></table></figure><p></p><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的。</p><p><strong>if else</strong></p><p>if else 语法格式：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p><strong>if else-if else</strong></p><p>if else-if else 语法格式：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>以下实例判断两个变量是否相等：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;a 等于 b&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;a 大于 b&quot;</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">echo &quot;a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;没有符合的条件&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a 小于 b</span><br></pre></td></tr></table></figure><p></p><p>if else语句经常与test命令结合使用，如下所示：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num1=$[2*3]</span><br><span class="line">num2=$[1+5]</span><br><span class="line">if test $[num1] -eq $[num2]</span><br><span class="line">then</span><br><span class="line">    echo &apos;两个数字相等!&apos;</span><br><span class="line">else</span><br><span class="line">    echo &apos;两个数字不相等!&apos;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个数字相等!</span><br></pre></td></tr></table></figure><p></p><p><strong>for 循环</strong></p><p>for循环一般格式为：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>写成一行：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for var in item1 item2 ... itemN; do command1; command2… done;</span><br></pre></td></tr></table></figure><p></p><p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><p>例如，顺序输出当前列表中的数字：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The value is: 1</span><br><span class="line">The value is: 2</span><br><span class="line">The value is: 3</span><br><span class="line">The value is: 4</span><br><span class="line">The value is: 5</span><br></pre></td></tr></table></figure><p></p><p>顺序输出字符串中的字符：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for str in &apos;This is a string&apos;</span><br><span class="line">do</span><br><span class="line">    echo $str</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p></p><p><strong>while 语句</strong></p><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>运行脚本，输出：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p></p><p><strong>无限循环</strong></p><p>无限循环语法格式：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>或者<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (( ; ; ))</span><br></pre></td></tr></table></figure><p></p><p><strong>until 循环</strong></p><p>until 循环执行一系列命令直至条件为 true 时停止。</p><p>until 循环与 while 循环在处理方式上刚好相反。</p><p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p><p>until 语法格式:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p><p>以下实例我们使用 until 命令来输出 0 ~ 9 的数字：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line"></span><br><span class="line">until [ ! $a -lt 10 ]</span><br><span class="line">do</span><br><span class="line">    echo $a</span><br><span class="line">    a=`expr $a + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p></p><p><strong>case</strong></p><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p><p>case语句格式如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p></p><p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>下面的脚本提示输入1到4，与每一种模式进行匹配：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;输入 1 到 4 之间的数字:&apos;</span><br><span class="line">echo &apos;你输入的数字为:&apos;</span><br><span class="line">read aNum</span><br><span class="line">case $aNum in</span><br><span class="line">    1)  echo &apos;你选择了 1&apos;</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo &apos;你选择了 2&apos;</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo &apos;你选择了 3&apos;</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo &apos;你选择了 4&apos;</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo &apos;你没有输入 1 到 4 之间的数字&apos;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p></p><p>输入不同的内容，会有不同的结果，例如：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入 1 到 4 之间的数字:</span><br><span class="line">你输入的数字为:</span><br><span class="line">3</span><br><span class="line">你选择了 3</span><br></pre></td></tr></table></figure><p></p><p><strong>esac</strong></p><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p><p><strong>跳出循环</strong></p><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><p><strong>break命令</strong></p><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n &quot;输入 1 到 5 之间的数字:&quot;</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5)</span><br><span class="line">            echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span><br><span class="line">            break</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>执行以上代码，输出结果为：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入 1 到 5 之间的数字:3</span><br><span class="line">你输入的数字为 3!</span><br><span class="line">输入 1 到 5 之间的数字:7</span><br><span class="line">你输入的数字不是 1 到 5 之间的! 游戏结束</span><br></pre></td></tr></table></figure><p></p><p><strong>continue命令</strong></p><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环，与C语言一样。</p><p>对上面break的例子进行修改：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n &quot;输入 1 到 5 之间的数字:&quot;</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5)</span><br><span class="line">            echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span><br><span class="line">            continue</span><br><span class="line">            echo &quot;游戏结束&quot;</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 <strong>echo “游戏结束”</strong> 永远不会被执行。</p><hr><h2 id="四、内存纠错（指出错误、修改错误）-10’"><a href="#四、内存纠错（指出错误、修改错误）-10’" class="headerlink" title="四、内存纠错（指出错误、修改错误） 10’"></a><em>四、内存纠错（指出错误、修改错误） 10’</em></h2><p>==内存实验代码相关内容搞清楚==</p><ul><li>代码区（text segment）。加载的是可执行文件代码段，其加载到内存中的位置由加载器完成。</li><li>全局初始化数据区/静态数据区（Data Segment）。加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据）的数据的生存周期为整个程序运行过程。</li><li>未初始化数据区（BSS）。加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</li><li>栈区（stack）。由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</li><li>堆区（heap）。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时有可能由OS回收。</li></ul><p><strong>常见的内存错误：</strong></p><ul><li>返回局部变量地址错误</li><li>临时空间过大：如定义数组的大小过大</li><li>空指针</li><li>滥用</li><li>泄漏：通常指堆内存泄露。即通过malloc、realloc和new等函数分配内存造成的</li><li>出现原因：堆内存分配后，未释放；堆内存分配后，释放顺序不当</li></ul><p><strong>例题</strong>⚠️⚠️⚠️</p><ul><li><p>示例1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void GetMemory(char *p, int num)</span><br><span class="line">&#123;</span><br><span class="line">p = (char *)malloc(sizeof(char) * num);</span><br><span class="line">&#125;</span><br><span class="line">void Test(void)</span><br><span class="line">&#123;</span><br><span class="line">char *str = NULL;</span><br><span class="line">GetMemory(str, 100); </span><br><span class="line">strcpy(str, &quot;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<em>错误：</em>==</p><p>（1）空指针非法操作。因为str与p之间是值传递，在函数GetMemory调用结束后，p分配空</p><p>（2）在函数GetMemory中分配的空间没有回收，导致内存泄露。</p><p>改正：</p><p>参见示例2和示例3。</p></li><li><p>示例2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void GetMemory2(char **p, int num)</span><br><span class="line">&#123;</span><br><span class="line">*p = (char *)malloc(sizeof(char) * num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Test2(void)</span><br><span class="line">&#123;</span><br><span class="line">char *str = NULL;</span><br><span class="line">GetMemory2(&amp;str, 100); </span><br><span class="line">strcpy(str, &quot;hello&quot;);</span><br><span class="line">cout&lt;&lt; str &lt;&lt; endl;</span><br><span class="line">free(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<em>正确</em>==</p></li><li><p>示例3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *GetMemory3(int num)</span><br><span class="line">&#123;</span><br><span class="line">char *p = (char *)malloc(sizeof(char) * num);</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Test3(void)</span><br><span class="line">&#123;</span><br><span class="line">char *str = NULL;</span><br><span class="line">str = GetMemory3(100);</span><br><span class="line">strcpy(str, &quot;hello&quot;);</span><br><span class="line">cout&lt;&lt; str &lt;&lt; endl;</span><br><span class="line">free(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<em>正确</em>==</p></li><li><p>示例4</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *GetString(void)</span><br><span class="line">&#123;</span><br><span class="line">char p[] = &quot;hello world&quot;;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Test4(void)</span><br><span class="line">&#123;</span><br><span class="line">char *str = NULL;</span><br><span class="line">str = GetString();</span><br><span class="line">cout&lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<em>错误:</em>==</p><p>（1）出现乱码打印。因为在函数GetString中，p数组拷贝了字符串常量“hello world”的值，但函数调用结束后，p数组回收导致这段空间内容被篡改，但p数组首地址确能成功返回指针变量str中，所有str可以输出，但内容确不是”hello world”。</p><p>改正：</p><p>参见示例5。</p></li><li><p>示例5</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *GetString2(void)</span><br><span class="line">&#123;</span><br><span class="line">char *p = &quot;hello world&quot;;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Test5(void)</span><br><span class="line">&#123;</span><br><span class="line">char *str = NULL;</span><br><span class="line">str = GetString2();</span><br><span class="line">cout&lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<em>正确</em>==</p></li></ul><hr><h2 id="五、问答题-40’"><a href="#五、问答题-40’" class="headerlink" title="五、问答题  40’"></a><em>五、问答题 40’</em></h2><ul><li><p>ls -l⚠️⚠️⚠️<br><img src="/2019/03/08/Linux期末复习/ls-l.png" alt="ls -l 详解" title="ls -l 详解"></p></li><li><p>进程</p></li><li><p>获取进程的各种ID (非负数)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">pid_t getpid(void); </span><br><span class="line">pid_t getppid(void);</span><br><span class="line">uid_t getuid(void); //获得进程的实际用户ID</span><br><span class="line">uid_t geteuid(void); /获得进程的有效用户ID</span><br><span class="line">gid_t getgid(void); //获得进程的实际组ID</span><br><span class="line">gid_t getegid(void); //获得进程的有效组ID</span><br></pre></td></tr></table></figure></li><li><p>创建进程 （fork）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">pid_t fork(void);</span><br></pre></td></tr></table></figure></li><li><p>例题⚠️⚠️⚠️</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int hours = 0;</span><br><span class="line">int seconds = -1;</span><br><span class="line">int minutes = 0;</span><br><span class="line"></span><br><span class="line">void handler(int signal) &#123;</span><br><span class="line">    seconds++;</span><br><span class="line">    if (seconds == 60) &#123;</span><br><span class="line">        minutes++;</span><br><span class="line">        seconds = 0;</span><br><span class="line">        if (minutes == 60) &#123;</span><br><span class="line">            hours++;</span><br><span class="line">            minutes = 0;</span><br><span class="line">            if (hours == 24) &#123;</span><br><span class="line">                hours = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\r%02d:%02d:%02d&quot;, hours, minutes, seconds);</span><br><span class="line">    fflush(stdout);//清空缓存</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    pid_t pid = fork();//创建子进程</span><br><span class="line">    pid_t ppid;</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        ppid = getppid();//获取父进程的id</span><br><span class="line">        while (1) &#123;</span><br><span class="line">            kill(ppid, SIGALRM);//接受信号</span><br><span class="line">            sleep(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (pid != -1) &#123;</span><br><span class="line">        signal(SIGALRM, handler);//安装SIGALRM信号</span><br><span class="line">        while (1) &#123;</span><br><span class="line">            pause();//等待接受信号</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;fork error!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>问题：⚠️有几个进程？描述整个过程⚠️</p><ul><li>线程</li><li><p>编译，不要忘了-lpthread⚠️⚠️⚠️</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c -lpthread</span><br></pre></td></tr></table></figure></li><li><p>线程控制函数⚠️⚠️⚠️</p><ul><li><p>创建线程<br>pthread_create</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">int pthread_create(pthread_t * tidp, const pthread_attr_t *attr, void *(*start_rtn)(void *), void *arg);</span><br><span class="line">    // 返回：成功返回0，出错返回错误编号</span><br><span class="line">参数：</span><br><span class="line">参数1：是一个传出参数，用于保存成功创建线程之后对应的线程id。</span><br><span class="line">参数2：表示线程的属性，通常默认传NULL，如果想使用具体的属性也可以修改具体的参数。</span><br><span class="line">参数3：函数指针，一个指向函数的指针。指向创建线程所执行函数的入口地址，函数执行完毕，则线程结束。</span><br><span class="line">参数4：线程主函数执行期间所使用的参数。</span><br></pre></td></tr></table></figure><p>当pthread_create函数返回成功时，有tidp指向的内存被设置为新创建线程的线程ID，其类型pthread_t定义为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/pthreadtypes.h&gt;</span><br><span class="line">typedef unsigned long int pthread_t;</span><br></pre></td></tr></table></figure><p>attr参数用于设置各种不同的线程属性，为NULL时表示默认线程属性。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个无类型指针的参数arg，如果需要向start_rtn函数传入的参数不止一个，可以把参数放入到一个结构中，然后把这个结构的地址作为arg的参数传入。</p><p>线程创建时并不能保证哪个线程会先运行：是新创建的线程还是调用线程。新创建的线程可以访问调用进程的地址空间，并且继承调用线程的浮点环境和信号屏蔽字，但是该线程的未决信号集被清除。那什么是未决信号呢，信号产生到信号被处理这段时间间隔，称信号是未决的。<br><br></p></li><li><p>终止线程<br>pthread_exit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">void pthread_exit(void *rval_ptr);</span><br><span class="line">    // 线程终止</span><br><span class="line">参数：retval表示线程的退出状态，通常穿NULL。当要求传出具体的退出状态时，可以使用retval。</span><br></pre></td></tr></table></figure><p>线程在结束时最好调用该函数，以确保安全、干净的退出。pthread_exit函数通过rval_ptr参数向调用线程的回收者传递退出信息，进程中的其他线程可以调用pthread_join函数访问到这个指针。</p><p>pthread_exit执行完后不会返回到调用者，而且永远不会失败。</p><p>线程可以通过以下三种方式退出，在不终止整个进程的情况下停止它的控制流：</p><ul><li>线程只是从启动过程中退出，返回值是线程的退出码</li><li>线程可以被同一进程中的其他线程取消</li><li>线程调用pthread_exit</li></ul></li><li><p>等待线程<br>pthread_join</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">int pthread_join(pthread_t thread, void **rval_ptr);</span><br><span class="line">    // 返回：成功返回0，出错返回错误代码</span><br><span class="line">参数： pthread为线程id，retval为线程的状态。可以与pthread_exit()结合使用。</span><br></pre></td></tr></table></figure><p>调用该函数的线程将挂起等待，为阻塞的状态。直到id为thread的线程终止。thread线程以不同的方法终止，通过pthread_join得到的终止状态是不同的，总结如下：</p><ol><li>如果thread线程通过return返回，retval所指向的单元里存放的是thread线程函数的返回值。</li><li>如果thread线程被别的线程调用pthread_cancel异常终止掉，retval所指向的单元里存放的是常数PTHREAD_CANCELED。</li><li>如果thread线程是自己调用pthread_exit终止的，retval所指向的单元存放的是传给pthread_exit的参数。</li><li>如果对thread线程的终止状态不感兴趣，可以传NULL给retval参数。</li></ol></li></ul></li><li><p>其他的内容嘛，自己想我为什么不写*😄😄😄</p></li><li><p>makefile</p></li><li><p>多说无义，直接上题⚠️⚠️⚠️</p><p>阅读Makefile文件，回答问题：</p><p>如果注释掉all : libmys.so语句的话，需要输入指定执行规则make libmys.so运行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all : libmys.so</span><br><span class="line">SRC=f1.c f2.c f3.c</span><br><span class="line">TGT=$(patsubst %.c,%.o,$(SRC))   #子串替换</span><br><span class="line">%.o : %.c        #模式规则 所有.c通过执行gcc指令获得.o文件</span><br><span class="line">    cc -c $?     #代表依赖文件f1.c f2.c f3.c</span><br><span class="line">libmys.so : $(TGT)  </span><br><span class="line">    cc -shared -o $@ $(TGT)</span><br><span class="line">clean:  </span><br><span class="line">    rm -f $(TGT)</span><br></pre></td></tr></table></figure><p>回答以下问题：</p><ul><li><p>A:</p><ul><li><p>此Makefile文件的主要功能是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建名为libmys.so的动态库</span><br></pre></td></tr></table></figure></li><li><p>此Makefile文件包含多少个规则？它们分别是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4个；分别是 all 、 %.o 、  libmys.so 、 clean</span><br><span class="line">（有几个冒号，就有几个规则）</span><br></pre></td></tr></table></figure></li><li><p>使用此Makefile文件可以生成目标文件f2.o吗？为什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以生成f2.o  因为有%.o : %.c 这一模式规则，该规则	使所有的.c的依赖文件编译生成.o的目标文件。</span><br></pre></td></tr></table></figure></li><li><p>此Makefile中，请指出存在的伪目标名称。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all、clean</span><br></pre></td></tr></table></figure></li><li><p>请写出$(TGT)的值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(TGT)的值为：f1.o f2.o f3.o</span><br></pre></td></tr></table></figure></li></ul></li><li><p>B:</p><ul><li><p>此Makefile文件中，可以生成共享库，请指出共享库名字。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libmys.so</span><br></pre></td></tr></table></figure></li><li><p>如果测试该生成共享库的源文件test.c，请将它编译生成可执行程序并运行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc test.c -o test -lmys -L ./</span><br><span class="line">LD_LIBRARY_PATH=./ </span><br><span class="line">./test</span><br></pre></td></tr></table></figure></li><li><p>此Makefile文件中，除了显式规则，还使用了哪种规则，请指出并解释。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还使用了模式规则：</span><br><span class="line">%.o : %.c</span><br><span class="line">cc -c $?</span><br><span class="line">该规则使所有的.c的依赖文件编译生成.o的目标文件。</span><br></pre></td></tr></table></figure></li><li><p>此Makefile文件中，all表示什么目标？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪目标</span><br></pre></td></tr></table></figure></li><li><p>此Makefile中，请指出使用的函数并解释其功能。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TGT=$(patsubst %.c,%.o,$(SRC)) ：运用patsubst（替换通配符），将$(SRC)中所有的末尾为.c的字符串替换为末尾为.o的字符串。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>C:</p><ul><li><p>此Makefile文件的主要功能是什么，如何通过命令执行出结果？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成共享库libmys.so，执行指令make 或者make all</span><br></pre></td></tr></table></figure></li><li><p>请描述该Makefile文件获得执行结果的过程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①　声明所需要的文件名</span><br><span class="line">②　为f1.c f2.c f3.c生成.o文件</span><br><span class="line">③　将所生成的.o文件生成共享库</span><br><span class="line">④　清除中间生成的文件</span><br></pre></td></tr></table></figure></li><li><p>$?的值是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f1.c f2.c f3.c</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
